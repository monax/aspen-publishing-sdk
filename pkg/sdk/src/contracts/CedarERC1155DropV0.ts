/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IDropClaimConditionV0 {
  export type ClaimConditionStruct = {
    startTimestamp: PromiseOrValue<BigNumberish>;
    maxClaimableSupply: PromiseOrValue<BigNumberish>;
    supplyClaimed: PromiseOrValue<BigNumberish>;
    quantityLimitPerTransaction: PromiseOrValue<BigNumberish>;
    waitTimeInSecondsBetweenClaims: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    pricePerToken: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
  };

  export type ClaimConditionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
  ] & {
    startTimestamp: BigNumber;
    maxClaimableSupply: BigNumber;
    supplyClaimed: BigNumber;
    quantityLimitPerTransaction: BigNumber;
    waitTimeInSecondsBetweenClaims: BigNumber;
    merkleRoot: string;
    pricePerToken: BigNumber;
    currency: string;
  };
}

export interface CedarERC1155DropV0Interface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'balanceOf(address,uint256)': FunctionFragment;
    'balanceOfBatch(address[],uint256[])': FunctionFragment;
    'burn(address,uint256,uint256)': FunctionFragment;
    'burnBatch(address,uint256[],uint256[])': FunctionFragment;
    'claim(address,uint256,uint256,address,uint256,bytes32[],uint256)': FunctionFragment;
    'claimCondition(uint256)': FunctionFragment;
    'contractType()': FunctionFragment;
    'contractURI()': FunctionFragment;
    'contractVersion()': FunctionFragment;
    'getActiveClaimConditionId(uint256)': FunctionFragment;
    'getBaseURIIndices()': FunctionFragment;
    'getClaimConditionById(uint256,uint256)': FunctionFragment;
    'getClaimTimestamp(uint256,uint256,address)': FunctionFragment;
    'getDefaultRoyaltyInfo()': FunctionFragment;
    'getPlatformFeeInfo()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'getRoyaltyInfoForToken(uint256)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'implementationVersion()': FunctionFragment;
    'initialize(address,string,string,string,address[],address,address,uint128,uint128,address)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isICedarFeaturesV0()': FunctionFragment;
    'isTrustedForwarder(address)': FunctionFragment;
    'issue(address,uint256,uint256)': FunctionFragment;
    'lazyMint(uint256,string)': FunctionFragment;
    'maxTotalSupply(uint256)': FunctionFragment;
    'maxWalletClaimCount(uint256)': FunctionFragment;
    'minorVersion()': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'name()': FunctionFragment;
    'nextTokenIdToMint()': FunctionFragment;
    'owner()': FunctionFragment;
    'primarySaleRecipient()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'royaltyInfo(uint256,uint256)': FunctionFragment;
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment;
    'saleRecipient(uint256)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)': FunctionFragment;
    'setContractURI(string)': FunctionFragment;
    'setDefaultRoyaltyInfo(address,uint256)': FunctionFragment;
    'setMaxTotalSupply(uint256,uint256)': FunctionFragment;
    'setMaxWalletClaimCount(uint256,uint256)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'setPlatformFeeInfo(address,uint256)': FunctionFragment;
    'setPrimarySaleRecipient(address)': FunctionFragment;
    'setRoyaltyInfoForToken(uint256,address,uint256)': FunctionFragment;
    'setSaleRecipientForToken(uint256,address)': FunctionFragment;
    'setWalletClaimCount(uint256,address,uint256)': FunctionFragment;
    'supportedFeatures()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply(uint256)': FunctionFragment;
    'updateBaseURI(uint256,string)': FunctionFragment;
    'uri(uint256)': FunctionFragment;
    'verifyClaim(uint256,address,uint256,uint256,address,uint256,bool)': FunctionFragment;
    'verifyClaimMerkleProof(uint256,address,uint256,uint256,bytes32[],uint256)': FunctionFragment;
    'walletClaimCount(uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'balanceOf'
      | 'balanceOfBatch'
      | 'burn'
      | 'burnBatch'
      | 'claim'
      | 'claimCondition'
      | 'contractType'
      | 'contractURI'
      | 'contractVersion'
      | 'getActiveClaimConditionId'
      | 'getBaseURIIndices'
      | 'getClaimConditionById'
      | 'getClaimTimestamp'
      | 'getDefaultRoyaltyInfo'
      | 'getPlatformFeeInfo'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'getRoyaltyInfoForToken'
      | 'grantRole'
      | 'hasRole'
      | 'implementationVersion'
      | 'initialize'
      | 'isApprovedForAll'
      | 'isICedarFeaturesV0'
      | 'isTrustedForwarder'
      | 'issue'
      | 'lazyMint'
      | 'maxTotalSupply'
      | 'maxWalletClaimCount'
      | 'minorVersion'
      | 'multicall'
      | 'name'
      | 'nextTokenIdToMint'
      | 'owner'
      | 'primarySaleRecipient'
      | 'renounceRole'
      | 'revokeRole'
      | 'royaltyInfo'
      | 'safeBatchTransferFrom'
      | 'safeTransferFrom'
      | 'saleRecipient'
      | 'setApprovalForAll'
      | 'setClaimConditions'
      | 'setContractURI'
      | 'setDefaultRoyaltyInfo'
      | 'setMaxTotalSupply'
      | 'setMaxWalletClaimCount'
      | 'setOwner'
      | 'setPlatformFeeInfo'
      | 'setPrimarySaleRecipient'
      | 'setRoyaltyInfoForToken'
      | 'setSaleRecipientForToken'
      | 'setWalletClaimCount'
      | 'supportedFeatures'
      | 'supportsInterface'
      | 'symbol'
      | 'totalSupply'
      | 'updateBaseURI'
      | 'uri'
      | 'verifyClaim'
      | 'verifyClaimMerkleProof'
      | 'walletClaimCount',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnBatch',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'claimCondition', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'contractType', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contractURI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contractVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getActiveClaimConditionId', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getBaseURIIndices', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getClaimConditionById',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getClaimTimestamp',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getDefaultRoyaltyInfo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPlatformFeeInfo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getRoyaltyInfoForToken', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'implementationVersion', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'isICedarFeaturesV0', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isTrustedForwarder', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'issue',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'lazyMint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'maxTotalSupply', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'maxWalletClaimCount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'minorVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'multicall', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextTokenIdToMint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'primarySaleRecipient', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'royaltyInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'saleRecipient', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setClaimConditions',
    values: [PromiseOrValue<BigNumberish>, IDropClaimConditionV0.ClaimConditionStruct[], PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setContractURI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setDefaultRoyaltyInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxTotalSupply',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxWalletClaimCount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setPlatformFeeInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setPrimarySaleRecipient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setRoyaltyInfoForToken',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSaleRecipientForToken',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setWalletClaimCount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'supportedFeatures', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'updateBaseURI',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'uri', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'verifyClaim',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'verifyClaimMerkleProof',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'walletClaimCount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimCondition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActiveClaimConditionId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBaseURIIndices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimConditionById', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDefaultRoyaltyInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPlatformFeeInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoyaltyInfoForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementationVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isICedarFeaturesV0', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTrustedForwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lazyMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWalletClaimCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minorVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextTokenIdToMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'primarySaleRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'royaltyInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'saleRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimConditions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setContractURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDefaultRoyaltyInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxWalletClaimCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPlatformFeeInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPrimarySaleRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRoyaltyInfoForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSaleRecipientForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWalletClaimCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportedFeatures', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBaseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyClaimMerkleProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'walletClaimCount', data: BytesLike): Result;

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment;
    'BaseURIUpdated(uint256,string)': EventFragment;
    'ClaimConditionsUpdated(uint256,tuple[])': EventFragment;
    'DefaultRoyalty(address,uint256)': EventFragment;
    'MaxTotalSupplyUpdated(uint256,uint256)': EventFragment;
    'MaxWalletClaimCountUpdated(uint256,uint256)': EventFragment;
    'OwnerUpdated(address,address)': EventFragment;
    'PlatformFeeInfoUpdated(address,uint256)': EventFragment;
    'PrimarySaleRecipientUpdated(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'RoyaltyForToken(uint256,address,uint256)': EventFragment;
    'SaleRecipientForTokenUpdated(uint256,address)': EventFragment;
    'TokensClaimed(uint256,uint256,address,address,uint256)': EventFragment;
    'TokensIssued(uint256,address,address,uint256)': EventFragment;
    'TokensLazyMinted(uint256,uint256,string)': EventFragment;
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment;
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment;
    'URI(string,uint256)': EventFragment;
    'WalletClaimCountUpdated(uint256,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseURIUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimConditionsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DefaultRoyalty'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxTotalSupplyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxWalletClaimCountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PlatformFeeInfoUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PrimarySaleRecipientUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoyaltyForToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SaleRecipientForTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensIssued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensLazyMinted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WalletClaimCountUpdated'): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURIUpdatedEventObject {
  baseURIIndex: BigNumber;
  baseURI: string;
}
export type BaseURIUpdatedEvent = TypedEvent<[BigNumber, string], BaseURIUpdatedEventObject>;

export type BaseURIUpdatedEventFilter = TypedEventFilter<BaseURIUpdatedEvent>;

export interface ClaimConditionsUpdatedEventObject {
  tokenId: BigNumber;
  claimConditions: IDropClaimConditionV0.ClaimConditionStructOutput[];
}
export type ClaimConditionsUpdatedEvent = TypedEvent<
  [BigNumber, IDropClaimConditionV0.ClaimConditionStructOutput[]],
  ClaimConditionsUpdatedEventObject
>;

export type ClaimConditionsUpdatedEventFilter = TypedEventFilter<ClaimConditionsUpdatedEvent>;

export interface DefaultRoyaltyEventObject {
  newRoyaltyRecipient: string;
  newRoyaltyBps: BigNumber;
}
export type DefaultRoyaltyEvent = TypedEvent<[string, BigNumber], DefaultRoyaltyEventObject>;

export type DefaultRoyaltyEventFilter = TypedEventFilter<DefaultRoyaltyEvent>;

export interface MaxTotalSupplyUpdatedEventObject {
  tokenId: BigNumber;
  maxTotalSupply: BigNumber;
}
export type MaxTotalSupplyUpdatedEvent = TypedEvent<[BigNumber, BigNumber], MaxTotalSupplyUpdatedEventObject>;

export type MaxTotalSupplyUpdatedEventFilter = TypedEventFilter<MaxTotalSupplyUpdatedEvent>;

export interface MaxWalletClaimCountUpdatedEventObject {
  tokenId: BigNumber;
  count: BigNumber;
}
export type MaxWalletClaimCountUpdatedEvent = TypedEvent<[BigNumber, BigNumber], MaxWalletClaimCountUpdatedEventObject>;

export type MaxWalletClaimCountUpdatedEventFilter = TypedEventFilter<MaxWalletClaimCountUpdatedEvent>;

export interface OwnerUpdatedEventObject {
  prevOwner: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[string, string], OwnerUpdatedEventObject>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface PlatformFeeInfoUpdatedEventObject {
  platformFeeRecipient: string;
  platformFeeBps: BigNumber;
}
export type PlatformFeeInfoUpdatedEvent = TypedEvent<[string, BigNumber], PlatformFeeInfoUpdatedEventObject>;

export type PlatformFeeInfoUpdatedEventFilter = TypedEventFilter<PlatformFeeInfoUpdatedEvent>;

export interface PrimarySaleRecipientUpdatedEventObject {
  recipient: string;
}
export type PrimarySaleRecipientUpdatedEvent = TypedEvent<[string], PrimarySaleRecipientUpdatedEventObject>;

export type PrimarySaleRecipientUpdatedEventFilter = TypedEventFilter<PrimarySaleRecipientUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RoyaltyForTokenEventObject {
  tokenId: BigNumber;
  royaltyRecipient: string;
  royaltyBps: BigNumber;
}
export type RoyaltyForTokenEvent = TypedEvent<[BigNumber, string, BigNumber], RoyaltyForTokenEventObject>;

export type RoyaltyForTokenEventFilter = TypedEventFilter<RoyaltyForTokenEvent>;

export interface SaleRecipientForTokenUpdatedEventObject {
  tokenId: BigNumber;
  saleRecipient: string;
}
export type SaleRecipientForTokenUpdatedEvent = TypedEvent<
  [BigNumber, string],
  SaleRecipientForTokenUpdatedEventObject
>;

export type SaleRecipientForTokenUpdatedEventFilter = TypedEventFilter<SaleRecipientForTokenUpdatedEvent>;

export interface TokensClaimedEventObject {
  claimConditionIndex: BigNumber;
  tokenId: BigNumber;
  claimer: string;
  receiver: string;
  quantityClaimed: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface TokensIssuedEventObject {
  tokenId: BigNumber;
  claimer: string;
  receiver: string;
  quantityClaimed: BigNumber;
}
export type TokensIssuedEvent = TypedEvent<[BigNumber, string, string, BigNumber], TokensIssuedEventObject>;

export type TokensIssuedEventFilter = TypedEventFilter<TokensIssuedEvent>;

export interface TokensLazyMintedEventObject {
  startTokenId: BigNumber;
  endTokenId: BigNumber;
  baseURI: string;
}
export type TokensLazyMintedEvent = TypedEvent<[BigNumber, BigNumber, string], TokensLazyMintedEventObject>;

export type TokensLazyMintedEventFilter = TypedEventFilter<TokensLazyMintedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], TransferSingleEventObject>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface WalletClaimCountUpdatedEventObject {
  tokenId: BigNumber;
  wallet: string;
  count: BigNumber;
}
export type WalletClaimCountUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  WalletClaimCountUpdatedEventObject
>;

export type WalletClaimCountUpdatedEventFilter = TypedEventFilter<WalletClaimCountUpdatedEvent>;

export interface CedarERC1155DropV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CedarERC1155DropV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    burn(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    burnBatch(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claim(
      _receiver: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimCondition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }>;

    contractType(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    contractVersion(overrides?: CallOverrides): Promise<[number]>;

    getActiveClaimConditionId(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseURIIndices(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getClaimConditionById(
      _tokenId: PromiseOrValue<BigNumberish>,
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [IDropClaimConditionV0.ClaimConditionStructOutput] & {
        condition: IDropClaimConditionV0.ClaimConditionStructOutput;
      }
    >;

    getClaimTimestamp(
      _tokenId: PromiseOrValue<BigNumberish>,
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        lastClaimTimestamp: BigNumber;
        nextValidClaimTimestamp: BigNumber;
      }
    >;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoyaltyInfoForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, number]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    implementationVersion(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
      }
    >;

    initialize(
      _defaultAdmin: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _contractURI: PromiseOrValue<string>,
      _trustedForwarders: PromiseOrValue<string>[],
      _saleRecipient: PromiseOrValue<string>,
      _royaltyRecipient: PromiseOrValue<string>,
      _royaltyBps: PromiseOrValue<BigNumberish>,
      _platformFeeBps: PromiseOrValue<BigNumberish>,
      _platformFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isICedarFeaturesV0(overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    issue(
      _receiver: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lazyMint(
      _amount: PromiseOrValue<BigNumberish>,
      _baseURIForTokens: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    maxTotalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWalletClaimCount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    minorVersion(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { minor: BigNumber; patch: BigNumber }>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    primarySaleRecipient(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    saleRecipient(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setClaimConditions(
      _tokenId: PromiseOrValue<BigNumberish>,
      _phases: IDropClaimConditionV0.ClaimConditionStruct[],
      _resetClaimEligibility: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setContractURI(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDefaultRoyaltyInfo(
      _royaltyRecipient: PromiseOrValue<string>,
      _royaltyBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxTotalSupply(
      _tokenId: PromiseOrValue<BigNumberish>,
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxWalletClaimCount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPlatformFeeInfo(
      _platformFeeRecipient: PromiseOrValue<string>,
      _platformFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPrimarySaleRecipient(
      _saleRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRoyaltyInfoForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _bps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSaleRecipientForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _saleRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWalletClaimCount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportedFeatures(overrides?: CallOverrides): Promise<[string[]] & { features: string[] }>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    updateBaseURI(
      baseURIIndex: PromiseOrValue<BigNumberish>,
      _baseURIForTokens: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    uri(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & { _tokenURI: string }>;

    verifyClaim(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      verifyMaxQuantityPerTransaction: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[void]>;

    verifyClaimMerkleProof(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber] & {
        validMerkleProof: boolean;
        merkleProofIndex: BigNumber;
      }
    >;

    walletClaimCount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  burn(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  burnBatch(
    account: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claim(
    _receiver: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _pricePerToken: PromiseOrValue<BigNumberish>,
    _proofs: PromiseOrValue<BytesLike>[],
    _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimCondition(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }>;

  contractType(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  contractVersion(overrides?: CallOverrides): Promise<number>;

  getActiveClaimConditionId(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getBaseURIIndices(overrides?: CallOverrides): Promise<BigNumber[]>;

  getClaimConditionById(
    _tokenId: PromiseOrValue<BigNumberish>,
    _conditionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IDropClaimConditionV0.ClaimConditionStructOutput>;

  getClaimTimestamp(
    _tokenId: PromiseOrValue<BigNumberish>,
    _conditionId: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      lastClaimTimestamp: BigNumber;
      nextValidClaimTimestamp: BigNumber;
    }
  >;

  getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

  getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  getRoyaltyInfoForToken(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, number]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  implementationVersion(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      major: BigNumber;
      minor: BigNumber;
      patch: BigNumber;
    }
  >;

  initialize(
    _defaultAdmin: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _contractURI: PromiseOrValue<string>,
    _trustedForwarders: PromiseOrValue<string>[],
    _saleRecipient: PromiseOrValue<string>,
    _royaltyRecipient: PromiseOrValue<string>,
    _royaltyBps: PromiseOrValue<BigNumberish>,
    _platformFeeBps: PromiseOrValue<BigNumberish>,
    _platformFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isICedarFeaturesV0(overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  issue(
    _receiver: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lazyMint(
    _amount: PromiseOrValue<BigNumberish>,
    _baseURIForTokens: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  maxTotalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  maxWalletClaimCount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  minorVersion(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { minor: BigNumber; patch: BigNumber }>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  primarySaleRecipient(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  royaltyInfo(
    tokenId: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  saleRecipient(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setClaimConditions(
    _tokenId: PromiseOrValue<BigNumberish>,
    _phases: IDropClaimConditionV0.ClaimConditionStruct[],
    _resetClaimEligibility: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setContractURI(
    _uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDefaultRoyaltyInfo(
    _royaltyRecipient: PromiseOrValue<string>,
    _royaltyBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxTotalSupply(
    _tokenId: PromiseOrValue<BigNumberish>,
    _maxTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxWalletClaimCount(
    _tokenId: PromiseOrValue<BigNumberish>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPlatformFeeInfo(
    _platformFeeRecipient: PromiseOrValue<string>,
    _platformFeeBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPrimarySaleRecipient(
    _saleRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRoyaltyInfoForToken(
    _tokenId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _bps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSaleRecipientForToken(
    _tokenId: PromiseOrValue<BigNumberish>,
    _saleRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWalletClaimCount(
    _tokenId: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportedFeatures(overrides?: CallOverrides): Promise<string[]>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  updateBaseURI(
    baseURIIndex: PromiseOrValue<BigNumberish>,
    _baseURIForTokens: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  uri(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  verifyClaim(
    _conditionId: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _pricePerToken: PromiseOrValue<BigNumberish>,
    verifyMaxQuantityPerTransaction: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<void>;

  verifyClaimMerkleProof(
    _conditionId: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _proofs: PromiseOrValue<BytesLike>[],
    _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber] & {
      validMerkleProof: boolean;
      merkleProofIndex: BigNumber;
    }
  >;

  walletClaimCount(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    burn(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    burnBatch(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    claim(
      _receiver: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimCondition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }>;

    contractType(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    contractVersion(overrides?: CallOverrides): Promise<number>;

    getActiveClaimConditionId(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseURIIndices(overrides?: CallOverrides): Promise<BigNumber[]>;

    getClaimConditionById(
      _tokenId: PromiseOrValue<BigNumberish>,
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IDropClaimConditionV0.ClaimConditionStructOutput>;

    getClaimTimestamp(
      _tokenId: PromiseOrValue<BigNumberish>,
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        lastClaimTimestamp: BigNumber;
        nextValidClaimTimestamp: BigNumber;
      }
    >;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyInfoForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, number]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    implementationVersion(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
      }
    >;

    initialize(
      _defaultAdmin: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _contractURI: PromiseOrValue<string>,
      _trustedForwarders: PromiseOrValue<string>[],
      _saleRecipient: PromiseOrValue<string>,
      _royaltyRecipient: PromiseOrValue<string>,
      _royaltyBps: PromiseOrValue<BigNumberish>,
      _platformFeeBps: PromiseOrValue<BigNumberish>,
      _platformFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isICedarFeaturesV0(overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    issue(
      _receiver: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lazyMint(
      _amount: PromiseOrValue<BigNumberish>,
      _baseURIForTokens: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    maxTotalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletClaimCount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    minorVersion(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { minor: BigNumber; patch: BigNumber }>;

    multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    primarySaleRecipient(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    saleRecipient(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setClaimConditions(
      _tokenId: PromiseOrValue<BigNumberish>,
      _phases: IDropClaimConditionV0.ClaimConditionStruct[],
      _resetClaimEligibility: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setContractURI(_uri: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setDefaultRoyaltyInfo(
      _royaltyRecipient: PromiseOrValue<string>,
      _royaltyBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxTotalSupply(
      _tokenId: PromiseOrValue<BigNumberish>,
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxWalletClaimCount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOwner(_newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPlatformFeeInfo(
      _platformFeeRecipient: PromiseOrValue<string>,
      _platformFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPrimarySaleRecipient(_saleRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRoyaltyInfoForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _bps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSaleRecipientForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _saleRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setWalletClaimCount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportedFeatures(overrides?: CallOverrides): Promise<string[]>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    updateBaseURI(
      baseURIIndex: PromiseOrValue<BigNumberish>,
      _baseURIForTokens: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    uri(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    verifyClaim(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      verifyMaxQuantityPerTransaction: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    verifyClaimMerkleProof(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber] & {
        validMerkleProof: boolean;
        merkleProofIndex: BigNumber;
      }
    >;

    walletClaimCount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'ApprovalForAll(address,address,bool)'(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'BaseURIUpdated(uint256,string)'(baseURIIndex?: null, baseURI?: null): BaseURIUpdatedEventFilter;
    BaseURIUpdated(baseURIIndex?: null, baseURI?: null): BaseURIUpdatedEventFilter;

    'ClaimConditionsUpdated(uint256,tuple[])'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      claimConditions?: null,
    ): ClaimConditionsUpdatedEventFilter;
    ClaimConditionsUpdated(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      claimConditions?: null,
    ): ClaimConditionsUpdatedEventFilter;

    'DefaultRoyalty(address,uint256)'(newRoyaltyRecipient?: null, newRoyaltyBps?: null): DefaultRoyaltyEventFilter;
    DefaultRoyalty(newRoyaltyRecipient?: null, newRoyaltyBps?: null): DefaultRoyaltyEventFilter;

    'MaxTotalSupplyUpdated(uint256,uint256)'(tokenId?: null, maxTotalSupply?: null): MaxTotalSupplyUpdatedEventFilter;
    MaxTotalSupplyUpdated(tokenId?: null, maxTotalSupply?: null): MaxTotalSupplyUpdatedEventFilter;

    'MaxWalletClaimCountUpdated(uint256,uint256)'(tokenId?: null, count?: null): MaxWalletClaimCountUpdatedEventFilter;
    MaxWalletClaimCountUpdated(tokenId?: null, count?: null): MaxWalletClaimCountUpdatedEventFilter;

    'OwnerUpdated(address,address)'(prevOwner?: null, newOwner?: null): OwnerUpdatedEventFilter;
    OwnerUpdated(prevOwner?: null, newOwner?: null): OwnerUpdatedEventFilter;

    'PlatformFeeInfoUpdated(address,uint256)'(
      platformFeeRecipient?: null,
      platformFeeBps?: null,
    ): PlatformFeeInfoUpdatedEventFilter;
    PlatformFeeInfoUpdated(platformFeeRecipient?: null, platformFeeBps?: null): PlatformFeeInfoUpdatedEventFilter;

    'PrimarySaleRecipientUpdated(address)'(
      recipient?: PromiseOrValue<string> | null,
    ): PrimarySaleRecipientUpdatedEventFilter;
    PrimarySaleRecipientUpdated(recipient?: PromiseOrValue<string> | null): PrimarySaleRecipientUpdatedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'RoyaltyForToken(uint256,address,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      royaltyRecipient?: null,
      royaltyBps?: null,
    ): RoyaltyForTokenEventFilter;
    RoyaltyForToken(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      royaltyRecipient?: null,
      royaltyBps?: null,
    ): RoyaltyForTokenEventFilter;

    'SaleRecipientForTokenUpdated(uint256,address)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      saleRecipient?: null,
    ): SaleRecipientForTokenUpdatedEventFilter;
    SaleRecipientForTokenUpdated(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      saleRecipient?: null,
    ): SaleRecipientForTokenUpdatedEventFilter;

    'TokensClaimed(uint256,uint256,address,address,uint256)'(
      claimConditionIndex?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      receiver?: null,
      quantityClaimed?: null,
    ): TokensClaimedEventFilter;
    TokensClaimed(
      claimConditionIndex?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      receiver?: null,
      quantityClaimed?: null,
    ): TokensClaimedEventFilter;

    'TokensIssued(uint256,address,address,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      receiver?: null,
      quantityClaimed?: null,
    ): TokensIssuedEventFilter;
    TokensIssued(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      receiver?: null,
      quantityClaimed?: null,
    ): TokensIssuedEventFilter;

    'TokensLazyMinted(uint256,uint256,string)'(
      startTokenId?: null,
      endTokenId?: null,
      baseURI?: null,
    ): TokensLazyMintedEventFilter;
    TokensLazyMinted(startTokenId?: null, endTokenId?: null, baseURI?: null): TokensLazyMintedEventFilter;

    'TransferBatch(address,address,address,uint256[],uint256[])'(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null,
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null,
    ): TransferBatchEventFilter;

    'TransferSingle(address,address,address,uint256,uint256)'(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null,
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null,
    ): TransferSingleEventFilter;

    'URI(string,uint256)'(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;

    'WalletClaimCountUpdated(uint256,address,uint256)'(
      tokenId?: null,
      wallet?: PromiseOrValue<string> | null,
      count?: null,
    ): WalletClaimCountUpdatedEventFilter;
    WalletClaimCountUpdated(
      tokenId?: null,
      wallet?: PromiseOrValue<string> | null,
      count?: null,
    ): WalletClaimCountUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    burnBatch(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claim(
      _receiver: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimCondition(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    contractType(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveClaimConditionId(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseURIIndices(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimConditionById(
      _tokenId: PromiseOrValue<BigNumberish>,
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getClaimTimestamp(
      _tokenId: PromiseOrValue<BigNumberish>,
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyInfoForToken(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    implementationVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _defaultAdmin: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _contractURI: PromiseOrValue<string>,
      _trustedForwarders: PromiseOrValue<string>[],
      _saleRecipient: PromiseOrValue<string>,
      _royaltyRecipient: PromiseOrValue<string>,
      _royaltyBps: PromiseOrValue<BigNumberish>,
      _platformFeeBps: PromiseOrValue<BigNumberish>,
      _platformFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isICedarFeaturesV0(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    issue(
      _receiver: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lazyMint(
      _amount: PromiseOrValue<BigNumberish>,
      _baseURIForTokens: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    maxTotalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletClaimCount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    minorVersion(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    primarySaleRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    saleRecipient(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setClaimConditions(
      _tokenId: PromiseOrValue<BigNumberish>,
      _phases: IDropClaimConditionV0.ClaimConditionStruct[],
      _resetClaimEligibility: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setContractURI(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDefaultRoyaltyInfo(
      _royaltyRecipient: PromiseOrValue<string>,
      _royaltyBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxTotalSupply(
      _tokenId: PromiseOrValue<BigNumberish>,
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxWalletClaimCount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPlatformFeeInfo(
      _platformFeeRecipient: PromiseOrValue<string>,
      _platformFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPrimarySaleRecipient(
      _saleRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRoyaltyInfoForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _bps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSaleRecipientForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _saleRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWalletClaimCount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportedFeatures(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    updateBaseURI(
      baseURIIndex: PromiseOrValue<BigNumberish>,
      _baseURIForTokens: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    uri(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    verifyClaim(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      verifyMaxQuantityPerTransaction: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    verifyClaimMerkleProof(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    walletClaimCount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burn(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    burnBatch(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claim(
      _receiver: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimCondition(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveClaimConditionId(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBaseURIIndices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimConditionById(
      _tokenId: PromiseOrValue<BigNumberish>,
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getClaimTimestamp(
      _tokenId: PromiseOrValue<BigNumberish>,
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoyaltyInfoForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    implementationVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _defaultAdmin: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _contractURI: PromiseOrValue<string>,
      _trustedForwarders: PromiseOrValue<string>[],
      _saleRecipient: PromiseOrValue<string>,
      _royaltyRecipient: PromiseOrValue<string>,
      _royaltyBps: PromiseOrValue<BigNumberish>,
      _platformFeeBps: PromiseOrValue<BigNumberish>,
      _platformFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isICedarFeaturesV0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issue(
      _receiver: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lazyMint(
      _amount: PromiseOrValue<BigNumberish>,
      _baseURIForTokens: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    maxTotalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWalletClaimCount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minorVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primarySaleRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    saleRecipient(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setClaimConditions(
      _tokenId: PromiseOrValue<BigNumberish>,
      _phases: IDropClaimConditionV0.ClaimConditionStruct[],
      _resetClaimEligibility: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDefaultRoyaltyInfo(
      _royaltyRecipient: PromiseOrValue<string>,
      _royaltyBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxTotalSupply(
      _tokenId: PromiseOrValue<BigNumberish>,
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxWalletClaimCount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPlatformFeeInfo(
      _platformFeeRecipient: PromiseOrValue<string>,
      _platformFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPrimarySaleRecipient(
      _saleRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRoyaltyInfoForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _bps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSaleRecipientForToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _saleRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWalletClaimCount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportedFeatures(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBaseURI(
      baseURIIndex: PromiseOrValue<BigNumberish>,
      _baseURIForTokens: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    uri(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyClaim(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      verifyMaxQuantityPerTransaction: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    verifyClaimMerkleProof(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _proofs: PromiseOrValue<BytesLike>[],
      _proofMaxQuantityPerTransaction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    walletClaimCount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}

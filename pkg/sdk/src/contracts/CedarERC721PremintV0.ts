/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace ICedarPremintV0 {
  export type TransferRequestStruct = {
    to: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type TransferRequestStructOutput = [string, BigNumber] & {
    to: string;
    tokenId: BigNumber;
  };
}

export interface CedarERC721PremintV0Interface extends utils.Interface {
  functions: {
    'acceptTerms()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseURI()': FunctionFragment;
    'checkSignature(address,bytes)': FunctionFragment;
    'deleteRoyalties()': FunctionFragment;
    'getAgreementStatus(address)': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'implementationVersion()': FunctionFragment;
    'initialize(string,string,uint256,address,address,string,string)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isGreenlistOn()': FunctionFragment;
    'isICedarFeaturesV0()': FunctionFragment;
    'minorVersion()': FunctionFragment;
    'mintBatch(uint256,address)': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerDomain()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'royaltyInfo(uint256,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setGreenlistStatus(bool)': FunctionFragment;
    'setMaxLimit(uint256)': FunctionFragment;
    'setOwnerDomain(string)': FunctionFragment;
    'setRoyalties(address,uint96)': FunctionFragment;
    'setTermsStatus(bool)': FunctionFragment;
    'storeTermsAccepted(address,bytes)': FunctionFragment;
    'supportedFeatures()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'termsActivated()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferFromBatch((address,uint256)[])': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgradeBaseURI(string)': FunctionFragment;
    'userAgreement()': FunctionFragment;
    'verifier()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptTerms'
      | 'approve'
      | 'balanceOf'
      | 'baseURI'
      | 'checkSignature'
      | 'deleteRoyalties'
      | 'getAgreementStatus'
      | 'getApproved'
      | 'implementationVersion'
      | 'initialize'
      | 'isApprovedForAll'
      | 'isGreenlistOn'
      | 'isICedarFeaturesV0'
      | 'minorVersion'
      | 'mintBatch'
      | 'multicall'
      | 'name'
      | 'owner'
      | 'ownerDomain'
      | 'ownerOf'
      | 'renounceOwnership'
      | 'royaltyInfo'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setGreenlistStatus'
      | 'setMaxLimit'
      | 'setOwnerDomain'
      | 'setRoyalties'
      | 'setTermsStatus'
      | 'storeTermsAccepted'
      | 'supportedFeatures'
      | 'supportsInterface'
      | 'symbol'
      | 'termsActivated'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'transferFromBatch'
      | 'transferOwnership'
      | 'upgradeBaseURI'
      | 'userAgreement'
      | 'verifier',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptTerms', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'checkSignature',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'deleteRoyalties', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAgreementStatus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'implementationVersion', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'isGreenlistOn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isICedarFeaturesV0', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minorVersion', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintBatch',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'multicall', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerDomain', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'royaltyInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setGreenlistStatus', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setMaxLimit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setOwnerDomain', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setRoyalties',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setTermsStatus', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'storeTermsAccepted',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'supportedFeatures', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'termsActivated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferFromBatch', values: [ICedarPremintV0.TransferRequestStruct[]]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'upgradeBaseURI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userAgreement', values?: undefined): string;
  encodeFunctionData(functionFragment: 'verifier', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'acceptTerms', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkSignature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteRoyalties', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAgreementStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementationVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGreenlistOn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isICedarFeaturesV0', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minorVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerDomain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'royaltyInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGreenlistStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwnerDomain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRoyalties', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTermsStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'storeTermsAccepted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportedFeatures', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'termsActivated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFromBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeBaseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userAgreement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifier', data: BytesLike): Result;

  events: {
    'AcceptTerms(string,address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'BaseURI(string)': EventFragment;
    'GreenlistStatus(bool)': EventFragment;
    'MaxLimit(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PreMintMaxPerBatch(uint64)': EventFragment;
    'Received(address,uint256)': EventFragment;
    'TermsActive(bool)': EventFragment;
    'TokenMinted(uint256,uint96,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'TransferOwnership(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AcceptTerms'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseURI'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GreenlistStatus'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxLimit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PreMintMaxPerBatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Received'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TermsActive'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenMinted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferOwnership'): EventFragment;
}

export interface AcceptTermsEventObject {
  userAgreement: string;
  user: string;
}
export type AcceptTermsEvent = TypedEvent<[string, string], AcceptTermsEventObject>;

export type AcceptTermsEventFilter = TypedEventFilter<AcceptTermsEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURIEventObject {
  baseURI: string;
}
export type BaseURIEvent = TypedEvent<[string], BaseURIEventObject>;

export type BaseURIEventFilter = TypedEventFilter<BaseURIEvent>;

export interface GreenlistStatusEventObject {
  _status: boolean;
}
export type GreenlistStatusEvent = TypedEvent<[boolean], GreenlistStatusEventObject>;

export type GreenlistStatusEventFilter = TypedEventFilter<GreenlistStatusEvent>;

export interface MaxLimitEventObject {
  maxLimit: BigNumber;
}
export type MaxLimitEvent = TypedEvent<[BigNumber], MaxLimitEventObject>;

export type MaxLimitEventFilter = TypedEventFilter<MaxLimitEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PreMintMaxPerBatchEventObject {
  preMintMaxPerBatch: BigNumber;
}
export type PreMintMaxPerBatchEvent = TypedEvent<[BigNumber], PreMintMaxPerBatchEventObject>;

export type PreMintMaxPerBatchEventFilter = TypedEventFilter<PreMintMaxPerBatchEvent>;

export interface ReceivedEventObject {
  sender: string;
  value: BigNumber;
}
export type ReceivedEvent = TypedEvent<[string, BigNumber], ReceivedEventObject>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface TermsActiveEventObject {
  status: boolean;
}
export type TermsActiveEvent = TypedEvent<[boolean], TermsActiveEventObject>;

export type TermsActiveEventFilter = TypedEventFilter<TermsActiveEvent>;

export interface TokenMintedEventObject {
  tokenId: BigNumber;
  tierId: BigNumber;
  receiver: string;
}
export type TokenMintedEvent = TypedEvent<[BigNumber, BigNumber, string], TokenMintedEventObject>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferOwnershipEventObject {
  _address: string;
}
export type TransferOwnershipEvent = TypedEvent<[string], TransferOwnershipEventObject>;

export type TransferOwnershipEventFilter = TypedEventFilter<TransferOwnershipEvent>;

export interface CedarERC721PremintV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CedarERC721PremintV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptTerms(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    checkSignature(
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    deleteRoyalties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getAgreementStatus(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { sig: boolean }>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    implementationVersion(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
      }
    >;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _maxLimit: PromiseOrValue<BigNumberish>,
      _greenlistManagerAddress: PromiseOrValue<string>,
      _signatureVerifier: PromiseOrValue<string>,
      _userAgreement: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isGreenlistOn(overrides?: CallOverrides): Promise<[boolean]>;

    isICedarFeaturesV0(overrides?: CallOverrides): Promise<[boolean]>;

    minorVersion(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { minor: BigNumber; patch: BigNumber }>;

    mintBatch(
      _quantity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerDomain(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber]>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGreenlistStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwnerDomain(
      _ownerDomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRoyalties(
      _receiver: PromiseOrValue<string>,
      _feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTermsStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    storeTermsAccepted(
      _acceptor: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportedFeatures(overrides?: CallOverrides): Promise<[string[]] & { features: string[] }>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    termsActivated(overrides?: CallOverrides): Promise<[boolean]>;

    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFromBatch(
      transferRequests: ICedarPremintV0.TransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userAgreement(overrides?: CallOverrides): Promise<[string]>;

    verifier(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptTerms(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  checkSignature(
    _account: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  deleteRoyalties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getAgreementStatus(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  implementationVersion(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      major: BigNumber;
      minor: BigNumber;
      patch: BigNumber;
    }
  >;

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _maxLimit: PromiseOrValue<BigNumberish>,
    _greenlistManagerAddress: PromiseOrValue<string>,
    _signatureVerifier: PromiseOrValue<string>,
    _userAgreement: PromiseOrValue<string>,
    baseURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isGreenlistOn(overrides?: CallOverrides): Promise<boolean>;

  isICedarFeaturesV0(overrides?: CallOverrides): Promise<boolean>;

  minorVersion(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { minor: BigNumber; patch: BigNumber }>;

  mintBatch(
    _quantity: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerDomain(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  royaltyInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    _salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber]>;

  'safeTransferFrom(address,address,uint256)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGreenlistStatus(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxLimit(
    _maxLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwnerDomain(
    _ownerDomain: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRoyalties(
    _receiver: PromiseOrValue<string>,
    _feeNumerator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTermsStatus(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  storeTermsAccepted(
    _acceptor: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportedFeatures(overrides?: CallOverrides): Promise<string[]>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  termsActivated(overrides?: CallOverrides): Promise<boolean>;

  tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFromBatch(
    transferRequests: ICedarPremintV0.TransferRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeBaseURI(
    baseURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userAgreement(overrides?: CallOverrides): Promise<string>;

  verifier(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptTerms(overrides?: CallOverrides): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    checkSignature(
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deleteRoyalties(overrides?: CallOverrides): Promise<void>;

    getAgreementStatus(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    implementationVersion(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
      }
    >;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _maxLimit: PromiseOrValue<BigNumberish>,
      _greenlistManagerAddress: PromiseOrValue<string>,
      _signatureVerifier: PromiseOrValue<string>,
      _userAgreement: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isGreenlistOn(overrides?: CallOverrides): Promise<boolean>;

    isICedarFeaturesV0(overrides?: CallOverrides): Promise<boolean>;

    minorVersion(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { minor: BigNumber; patch: BigNumber }>;

    mintBatch(
      _quantity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerDomain(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber]>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGreenlistStatus(_status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setMaxLimit(_maxLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setOwnerDomain(_ownerDomain: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRoyalties(
      _receiver: PromiseOrValue<string>,
      _feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTermsStatus(_status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    storeTermsAccepted(
      _acceptor: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportedFeatures(overrides?: CallOverrides): Promise<string[]>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    termsActivated(overrides?: CallOverrides): Promise<boolean>;

    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferFromBatch(
      transferRequests: ICedarPremintV0.TransferRequestStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeBaseURI(baseURI_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    userAgreement(overrides?: CallOverrides): Promise<string>;

    verifier(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AcceptTerms(string,address)'(userAgreement?: null, user?: null): AcceptTermsEventFilter;
    AcceptTerms(userAgreement?: null, user?: null): AcceptTermsEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'BaseURI(string)'(baseURI?: null): BaseURIEventFilter;
    BaseURI(baseURI?: null): BaseURIEventFilter;

    'GreenlistStatus(bool)'(_status?: null): GreenlistStatusEventFilter;
    GreenlistStatus(_status?: null): GreenlistStatusEventFilter;

    'MaxLimit(uint256)'(maxLimit?: null): MaxLimitEventFilter;
    MaxLimit(maxLimit?: null): MaxLimitEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'PreMintMaxPerBatch(uint64)'(preMintMaxPerBatch?: null): PreMintMaxPerBatchEventFilter;
    PreMintMaxPerBatch(preMintMaxPerBatch?: null): PreMintMaxPerBatchEventFilter;

    'Received(address,uint256)'(sender?: null, value?: null): ReceivedEventFilter;
    Received(sender?: null, value?: null): ReceivedEventFilter;

    'TermsActive(bool)'(status?: null): TermsActiveEventFilter;
    TermsActive(status?: null): TermsActiveEventFilter;

    'TokenMinted(uint256,uint96,address)'(tokenId?: null, tierId?: null, receiver?: null): TokenMintedEventFilter;
    TokenMinted(tokenId?: null, tierId?: null, receiver?: null): TokenMintedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;

    'TransferOwnership(address)'(_address?: null): TransferOwnershipEventFilter;
    TransferOwnership(_address?: null): TransferOwnershipEventFilter;
  };

  estimateGas: {
    acceptTerms(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    checkSignature(
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deleteRoyalties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getAgreementStatus(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    implementationVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _maxLimit: PromiseOrValue<BigNumberish>,
      _greenlistManagerAddress: PromiseOrValue<string>,
      _signatureVerifier: PromiseOrValue<string>,
      _userAgreement: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isGreenlistOn(overrides?: CallOverrides): Promise<BigNumber>;

    isICedarFeaturesV0(overrides?: CallOverrides): Promise<BigNumber>;

    minorVersion(overrides?: CallOverrides): Promise<BigNumber>;

    mintBatch(
      _quantity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerDomain(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGreenlistStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwnerDomain(
      _ownerDomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRoyalties(
      _receiver: PromiseOrValue<string>,
      _feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTermsStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    storeTermsAccepted(
      _acceptor: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportedFeatures(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    termsActivated(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFromBatch(
      transferRequests: ICedarPremintV0.TransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userAgreement(overrides?: CallOverrides): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptTerms(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkSignature(
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deleteRoyalties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getAgreementStatus(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementationVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _maxLimit: PromiseOrValue<BigNumberish>,
      _greenlistManagerAddress: PromiseOrValue<string>,
      _signatureVerifier: PromiseOrValue<string>,
      _userAgreement: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isGreenlistOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isICedarFeaturesV0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minorVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBatch(
      _quantity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGreenlistStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwnerDomain(
      _ownerDomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRoyalties(
      _receiver: PromiseOrValue<string>,
      _feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTermsStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    storeTermsAccepted(
      _acceptor: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportedFeatures(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    termsActivated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFromBatch(
      transferRequests: ICedarPremintV0.TransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userAgreement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

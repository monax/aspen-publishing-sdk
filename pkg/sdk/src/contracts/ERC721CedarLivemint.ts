/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface ERC721CedarLivemintInterface extends utils.Interface {
  functions: {
    'ACCESS_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'WHITELIST_ACCESS_ROLE()': FunctionFragment;
    '_setFreeWhitelistMaxValues(uint64,uint64,uint64)': FunctionFragment;
    '_setFreeWhitelistMerkleRoot(bytes32)': FunctionFragment;
    '_setWhitelistMerkleRoot(bytes32)': FunctionFragment;
    '_setWhitelistPrice(uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseURI()': FunctionFragment;
    'deleteRoyalties()': FunctionFragment;
    'freeWhitelistCapPerWallet()': FunctionFragment;
    'freeWhitelistMaxPerTx()': FunctionFragment;
    'freeWhitelistMaxSupply()': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'liveMint(uint64)': FunctionFragment;
    'maxCapPerWallet()': FunctionFragment;
    'mintCapPerWallet()': FunctionFragment;
    'mintMaxPerTx()': FunctionFragment;
    'mintPrice()': FunctionFragment;
    'name()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'royaltyInfo(uint256,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setMaxCapPerWallet(uint64)': FunctionFragment;
    'setMaxLimit(uint256)': FunctionFragment;
    'setMintMaxValues(uint64,uint64)': FunctionFragment;
    'setMintPrice(uint256)': FunctionFragment;
    'setRoyalties(address,uint96)': FunctionFragment;
    'setStage(uint8)': FunctionFragment;
    'setWhitelistMaxValues(uint64,uint64,uint64)': FunctionFragment;
    'stage()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'upgradeBaseURI(string)': FunctionFragment;
    'whitelistCapPerWallet()': FunctionFragment;
    'whitelistMaxPerTx()': FunctionFragment;
    'whitelistMaxSupply()': FunctionFragment;
    'whitelistMint(uint64,bytes32[])': FunctionFragment;
    'whitelistPrice()': FunctionFragment;
    'withdraw()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ACCESS_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'WHITELIST_ACCESS_ROLE'
      | '_setFreeWhitelistMaxValues'
      | '_setFreeWhitelistMerkleRoot'
      | '_setWhitelistMerkleRoot'
      | '_setWhitelistPrice'
      | 'approve'
      | 'balanceOf'
      | 'baseURI'
      | 'deleteRoyalties'
      | 'freeWhitelistCapPerWallet'
      | 'freeWhitelistMaxPerTx'
      | 'freeWhitelistMaxSupply'
      | 'getApproved'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'isApprovedForAll'
      | 'liveMint'
      | 'maxCapPerWallet'
      | 'mintCapPerWallet'
      | 'mintMaxPerTx'
      | 'mintPrice'
      | 'name'
      | 'ownerOf'
      | 'renounceRole'
      | 'revokeRole'
      | 'royaltyInfo'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setMaxCapPerWallet'
      | 'setMaxLimit'
      | 'setMintMaxValues'
      | 'setMintPrice'
      | 'setRoyalties'
      | 'setStage'
      | 'setWhitelistMaxValues'
      | 'stage'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'upgradeBaseURI'
      | 'whitelistCapPerWallet'
      | 'whitelistMaxPerTx'
      | 'whitelistMaxSupply'
      | 'whitelistMint'
      | 'whitelistPrice'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ACCESS_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WHITELIST_ACCESS_ROLE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: '_setFreeWhitelistMaxValues',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_setFreeWhitelistMerkleRoot', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: '_setWhitelistMerkleRoot', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: '_setWhitelistPrice', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deleteRoyalties', values?: undefined): string;
  encodeFunctionData(functionFragment: 'freeWhitelistCapPerWallet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'freeWhitelistMaxPerTx', values?: undefined): string;
  encodeFunctionData(functionFragment: 'freeWhitelistMaxSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'liveMint', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'maxCapPerWallet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintCapPerWallet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintMaxPerTx', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'royaltyInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxCapPerWallet', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMaxLimit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setMintMaxValues',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setMintPrice', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setRoyalties',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setStage', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setWhitelistMaxValues',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'stage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'upgradeBaseURI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'whitelistCapPerWallet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistMaxPerTx', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistMaxSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'whitelistMint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]],
  ): string;
  encodeFunctionData(functionFragment: 'whitelistPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'ACCESS_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WHITELIST_ACCESS_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setFreeWhitelistMaxValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setFreeWhitelistMerkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setWhitelistMerkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setWhitelistPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteRoyalties', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freeWhitelistCapPerWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freeWhitelistMaxPerTx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freeWhitelistMaxSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liveMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxCapPerWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintCapPerWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintMaxPerTx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'royaltyInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxCapPerWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMintMaxValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMintPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRoyalties', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhitelistMaxValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeBaseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistCapPerWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistMaxPerTx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistMaxSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'BaseURI(string)': EventFragment;
    'FreeWhiteListStatus(bool)': EventFragment;
    'FreeWhitelistMaxValues(uint64,uint64,uint64)': EventFragment;
    'FreeWhitelistMerkeRoot(bytes32)': EventFragment;
    'MaxCapPerWallet(uint64)': EventFragment;
    'MaxLimit(uint256)': EventFragment;
    'MintMaxValues(uint64,uint64)': EventFragment;
    'MintPrice(uint256)': EventFragment;
    'Received(address,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'WhiteListMaxValues(uint64,uint64,uint64)': EventFragment;
    'WhitelistMerkeRoot(bytes32)': EventFragment;
    'WhitelistPrice(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseURI'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FreeWhiteListStatus'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FreeWhitelistMaxValues'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FreeWhitelistMerkeRoot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxCapPerWallet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxLimit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintMaxValues'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintPrice'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Received'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhiteListMaxValues'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistMerkeRoot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistPrice'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURIEventObject {
  baseURI: string;
}
export type BaseURIEvent = TypedEvent<[string], BaseURIEventObject>;

export type BaseURIEventFilter = TypedEventFilter<BaseURIEvent>;

export interface FreeWhiteListStatusEventObject {
  status: boolean;
}
export type FreeWhiteListStatusEvent = TypedEvent<[boolean], FreeWhiteListStatusEventObject>;

export type FreeWhiteListStatusEventFilter = TypedEventFilter<FreeWhiteListStatusEvent>;

export interface FreeWhitelistMaxValuesEventObject {
  freeWhitelistCapPerWallet: BigNumber;
  freeWhitelistMaxPerTx: BigNumber;
  freeWhitelistMaxSupply: BigNumber;
}
export type FreeWhitelistMaxValuesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FreeWhitelistMaxValuesEventObject
>;

export type FreeWhitelistMaxValuesEventFilter = TypedEventFilter<FreeWhitelistMaxValuesEvent>;

export interface FreeWhitelistMerkeRootEventObject {
  root: string;
}
export type FreeWhitelistMerkeRootEvent = TypedEvent<[string], FreeWhitelistMerkeRootEventObject>;

export type FreeWhitelistMerkeRootEventFilter = TypedEventFilter<FreeWhitelistMerkeRootEvent>;

export interface MaxCapPerWalletEventObject {
  maxCapPerWallet: BigNumber;
}
export type MaxCapPerWalletEvent = TypedEvent<[BigNumber], MaxCapPerWalletEventObject>;

export type MaxCapPerWalletEventFilter = TypedEventFilter<MaxCapPerWalletEvent>;

export interface MaxLimitEventObject {
  maxLimit: BigNumber;
}
export type MaxLimitEvent = TypedEvent<[BigNumber], MaxLimitEventObject>;

export type MaxLimitEventFilter = TypedEventFilter<MaxLimitEvent>;

export interface MintMaxValuesEventObject {
  mintCapPerWallet: BigNumber;
  mintMaxPerTx: BigNumber;
}
export type MintMaxValuesEvent = TypedEvent<[BigNumber, BigNumber], MintMaxValuesEventObject>;

export type MintMaxValuesEventFilter = TypedEventFilter<MintMaxValuesEvent>;

export interface MintPriceEventObject {
  mintPrice: BigNumber;
}
export type MintPriceEvent = TypedEvent<[BigNumber], MintPriceEventObject>;

export type MintPriceEventFilter = TypedEventFilter<MintPriceEvent>;

export interface ReceivedEventObject {
  sender: string;
  value: BigNumber;
}
export type ReceivedEvent = TypedEvent<[string, BigNumber], ReceivedEventObject>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WhiteListMaxValuesEventObject {
  whitelistCapPerWallet: BigNumber;
  whitelistMaxPerTx: BigNumber;
  whitelistMaxSupply: BigNumber;
}
export type WhiteListMaxValuesEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], WhiteListMaxValuesEventObject>;

export type WhiteListMaxValuesEventFilter = TypedEventFilter<WhiteListMaxValuesEvent>;

export interface WhitelistMerkeRootEventObject {
  root: string;
}
export type WhitelistMerkeRootEvent = TypedEvent<[string], WhitelistMerkeRootEventObject>;

export type WhitelistMerkeRootEventFilter = TypedEventFilter<WhitelistMerkeRootEvent>;

export interface WhitelistPriceEventObject {
  whitelistPrice: BigNumber;
}
export type WhitelistPriceEvent = TypedEvent<[BigNumber], WhitelistPriceEventObject>;

export type WhitelistPriceEventFilter = TypedEventFilter<WhitelistPriceEvent>;

export interface ERC721CedarLivemint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721CedarLivemintInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Access role
     */
    ACCESS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Access role
     */
    WHITELIST_ACCESS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    /**
     * this function sets the max values for free whitelist
     */
    _setFreeWhitelistMaxValues(
      _freeWhitelistCapPerWallet: PromiseOrValue<BigNumberish>,
      _freeWhitelistMaxPerTx: PromiseOrValue<BigNumberish>,
      _freeWhitelistMaxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets the merkle root hash for free whitelist
     */
    _setFreeWhitelistMerkleRoot(
      _freeWhitelistRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets the merkle root hash for whitelist
     */
    _setWhitelistMerkleRoot(
      _whitelistRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets the whitelist price
     */
    _setWhitelistPrice(
      _whitelistPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Stores the base uri
     */
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    /**
     * this function deletes the royalty info
     */
    deleteRoyalties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    /**
     * Stores max free whitelist cap
     */
    freeWhitelistCapPerWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Store free whitelist max per transaction
     */
    freeWhitelistMaxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Stores the max free whitelist supply
     */
    freeWhitelistMaxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    /**
     * this function handles the livemint and takes the number of tokens to mint. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total livemint for account Mint and transfer to account.
     */
    liveMint(
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Stores the maximum cap per wallet, includes both WL and live mints
     */
    maxCapPerWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Stores max mint cap per wallet
     */
    mintCapPerWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Stores mint max mint per tx
     */
    mintMaxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Stores the mint price
     */
    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.
     */
    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber]>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets max cap per wallet for both WL and mint
     */
    setMaxCapPerWallet(
      _maxCapPerWallet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets the maximum total in a collection
     */
    setMaxLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets the max values for mint
     */
    setMintMaxValues(
      _mintCapPerWallet: PromiseOrValue<BigNumberish>,
      _mintMaxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets the mint price
     */
    setMintPrice(
      _mintPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets the royalty percentage for the collection
     */
    setRoyalties(
      _receiver: PromiseOrValue<string>,
      _feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStage(
      _stage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function sets the max values for whitelist
     */
    setWhitelistMaxValues(
      _whitelistCapPerWallet: PromiseOrValue<BigNumberish>,
      _whitelistMaxPerTx: PromiseOrValue<BigNumberish>,
      _whitelistMaxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stage(overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * this function overrides the ERC721 tokenURI function. It returns the URI as `${baseURI}/${tokenId}`
     * gets token URI
     */
    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * this function upgrades the baseURI. All token metadata is stored in the baseURI as a JSON
     * upgrades the baseURI
     */
    upgradeBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Stores the max whitelist cap per wallet
     */
    whitelistCapPerWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistMaxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Stores the max whitelist supply
     */
    whitelistMaxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * this function handles the whitelist mint and takes the number of tokens to mint and proof. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total whitelist mint for account and total whitelist mint. Mint and transfer to account.
     */
    whitelistMint(
      _quantity: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Stores the whitelist price
     */
    whitelistPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * this function enables the owner to withdraw funds from the contract
     */
    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  /**
   * Access role
   */
  ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  /**
   * Access role
   */
  WHITELIST_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

  /**
   * this function sets the max values for free whitelist
   */
  _setFreeWhitelistMaxValues(
    _freeWhitelistCapPerWallet: PromiseOrValue<BigNumberish>,
    _freeWhitelistMaxPerTx: PromiseOrValue<BigNumberish>,
    _freeWhitelistMaxSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets the merkle root hash for free whitelist
   */
  _setFreeWhitelistMerkleRoot(
    _freeWhitelistRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets the merkle root hash for whitelist
   */
  _setWhitelistMerkleRoot(
    _whitelistRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets the whitelist price
   */
  _setWhitelistPrice(
    _whitelistPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-approve}.
   */
  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-balanceOf}.
   */
  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Stores the base uri
   */
  baseURI(overrides?: CallOverrides): Promise<string>;

  /**
   * this function deletes the royalty info
   */
  deleteRoyalties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  /**
   * Stores max free whitelist cap
   */
  freeWhitelistCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Store free whitelist max per transaction
   */
  freeWhitelistMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Stores the max free whitelist supply
   */
  freeWhitelistMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC721-getApproved}.
   */
  getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * See {IERC721-isApprovedForAll}.
   */
  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * this function handles the livemint and takes the number of tokens to mint. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total livemint for account Mint and transfer to account.
   */
  liveMint(
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Stores the maximum cap per wallet, includes both WL and live mints
   */
  maxCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Stores max mint cap per wallet
   */
  mintCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Stores mint max mint per tx
   */
  mintMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Stores the mint price
   */
  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC721Metadata-name}.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721-ownerOf}.
   */
  ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.
   */
  royaltyInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    _salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber]>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  'safeTransferFrom(address,address,uint256)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  'safeTransferFrom(address,address,uint256,bytes)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-setApprovalForAll}.
   */
  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets max cap per wallet for both WL and mint
   */
  setMaxCapPerWallet(
    _maxCapPerWallet: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets the maximum total in a collection
   */
  setMaxLimit(
    _maxLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets the max values for mint
   */
  setMintMaxValues(
    _mintCapPerWallet: PromiseOrValue<BigNumberish>,
    _mintMaxPerTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets the mint price
   */
  setMintPrice(
    _mintPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets the royalty percentage for the collection
   */
  setRoyalties(
    _receiver: PromiseOrValue<string>,
    _feeNumerator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStage(
    _stage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function sets the max values for whitelist
   */
  setWhitelistMaxValues(
    _whitelistCapPerWallet: PromiseOrValue<BigNumberish>,
    _whitelistMaxPerTx: PromiseOrValue<BigNumberish>,
    _whitelistMaxSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stage(overrides?: CallOverrides): Promise<number>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  /**
   * See {IERC721Metadata-symbol}.
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * this function overrides the ERC721 tokenURI function. It returns the URI as `${baseURI}/${tokenId}`
   * gets token URI
   */
  tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  /**
   * Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC721-transferFrom}.
   */
  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * this function upgrades the baseURI. All token metadata is stored in the baseURI as a JSON
   * upgrades the baseURI
   */
  upgradeBaseURI(
    baseURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Stores the max whitelist cap per wallet
   */
  whitelistCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Stores the max whitelist supply
   */
  whitelistMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * this function handles the whitelist mint and takes the number of tokens to mint and proof. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total whitelist mint for account and total whitelist mint. Mint and transfer to account.
   */
  whitelistMint(
    _quantity: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Stores the whitelist price
   */
  whitelistPrice(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * this function enables the owner to withdraw funds from the contract
   */
  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Access role
     */
    ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    /**
     * Access role
     */
    WHITELIST_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

    /**
     * this function sets the max values for free whitelist
     */
    _setFreeWhitelistMaxValues(
      _freeWhitelistCapPerWallet: PromiseOrValue<BigNumberish>,
      _freeWhitelistMaxPerTx: PromiseOrValue<BigNumberish>,
      _freeWhitelistMaxSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * this function sets the merkle root hash for free whitelist
     */
    _setFreeWhitelistMerkleRoot(
      _freeWhitelistRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * this function sets the merkle root hash for whitelist
     */
    _setWhitelistMerkleRoot(_whitelistRoot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    /**
     * this function sets the whitelist price
     */
    _setWhitelistPrice(_whitelistPrice: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores the base uri
     */
    baseURI(overrides?: CallOverrides): Promise<string>;

    /**
     * this function deletes the royalty info
     */
    deleteRoyalties(overrides?: CallOverrides): Promise<void>;

    /**
     * Stores max free whitelist cap
     */
    freeWhitelistCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Store free whitelist max per transaction
     */
    freeWhitelistMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores the max free whitelist supply
     */
    freeWhitelistMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * this function handles the livemint and takes the number of tokens to mint. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total livemint for account Mint and transfer to account.
     */
    liveMint(_quantity: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    /**
     * Stores the maximum cap per wallet, includes both WL and live mints
     */
    maxCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores max mint cap per wallet
     */
    mintCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores mint max mint per tx
     */
    mintMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores the mint price
     */
    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.
     */
    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber]>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * this function sets max cap per wallet for both WL and mint
     */
    setMaxCapPerWallet(_maxCapPerWallet: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    /**
     * this function sets the maximum total in a collection
     */
    setMaxLimit(_maxLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    /**
     * this function sets the max values for mint
     */
    setMintMaxValues(
      _mintCapPerWallet: PromiseOrValue<BigNumberish>,
      _mintMaxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * this function sets the mint price
     */
    setMintPrice(_mintPrice: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    /**
     * this function sets the royalty percentage for the collection
     */
    setRoyalties(
      _receiver: PromiseOrValue<string>,
      _feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStage(_stage: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    /**
     * this function sets the max values for whitelist
     */
    setWhitelistMaxValues(
      _whitelistCapPerWallet: PromiseOrValue<BigNumberish>,
      _whitelistMaxPerTx: PromiseOrValue<BigNumberish>,
      _whitelistMaxSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stage(overrides?: CallOverrides): Promise<number>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * this function overrides the ERC721 tokenURI function. It returns the URI as `${baseURI}/${tokenId}`
     * gets token URI
     */
    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    /**
     * Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * this function upgrades the baseURI. All token metadata is stored in the baseURI as a JSON
     * upgrades the baseURI
     */
    upgradeBaseURI(baseURI_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    /**
     * Stores the max whitelist cap per wallet
     */
    whitelistCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores the max whitelist supply
     */
    whitelistMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function handles the whitelist mint and takes the number of tokens to mint and proof. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total whitelist mint for account and total whitelist mint. Mint and transfer to account.
     */
    whitelistMint(
      _quantity: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Stores the whitelist price
     */
    whitelistPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function enables the owner to withdraw funds from the contract
     */
    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'BaseURI(string)'(baseURI?: null): BaseURIEventFilter;
    BaseURI(baseURI?: null): BaseURIEventFilter;

    'FreeWhiteListStatus(bool)'(status?: null): FreeWhiteListStatusEventFilter;
    FreeWhiteListStatus(status?: null): FreeWhiteListStatusEventFilter;

    'FreeWhitelistMaxValues(uint64,uint64,uint64)'(
      freeWhitelistCapPerWallet?: null,
      freeWhitelistMaxPerTx?: null,
      freeWhitelistMaxSupply?: null,
    ): FreeWhitelistMaxValuesEventFilter;
    FreeWhitelistMaxValues(
      freeWhitelistCapPerWallet?: null,
      freeWhitelistMaxPerTx?: null,
      freeWhitelistMaxSupply?: null,
    ): FreeWhitelistMaxValuesEventFilter;

    'FreeWhitelistMerkeRoot(bytes32)'(root?: null): FreeWhitelistMerkeRootEventFilter;
    FreeWhitelistMerkeRoot(root?: null): FreeWhitelistMerkeRootEventFilter;

    'MaxCapPerWallet(uint64)'(maxCapPerWallet?: null): MaxCapPerWalletEventFilter;
    MaxCapPerWallet(maxCapPerWallet?: null): MaxCapPerWalletEventFilter;

    'MaxLimit(uint256)'(maxLimit?: null): MaxLimitEventFilter;
    MaxLimit(maxLimit?: null): MaxLimitEventFilter;

    'MintMaxValues(uint64,uint64)'(mintCapPerWallet?: null, mintMaxPerTx?: null): MintMaxValuesEventFilter;
    MintMaxValues(mintCapPerWallet?: null, mintMaxPerTx?: null): MintMaxValuesEventFilter;

    'MintPrice(uint256)'(mintPrice?: null): MintPriceEventFilter;
    MintPrice(mintPrice?: null): MintPriceEventFilter;

    'Received(address,uint256)'(sender?: null, value?: null): ReceivedEventFilter;
    Received(sender?: null, value?: null): ReceivedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;

    'WhiteListMaxValues(uint64,uint64,uint64)'(
      whitelistCapPerWallet?: null,
      whitelistMaxPerTx?: null,
      whitelistMaxSupply?: null,
    ): WhiteListMaxValuesEventFilter;
    WhiteListMaxValues(
      whitelistCapPerWallet?: null,
      whitelistMaxPerTx?: null,
      whitelistMaxSupply?: null,
    ): WhiteListMaxValuesEventFilter;

    'WhitelistMerkeRoot(bytes32)'(root?: null): WhitelistMerkeRootEventFilter;
    WhitelistMerkeRoot(root?: null): WhitelistMerkeRootEventFilter;

    'WhitelistPrice(uint256)'(whitelistPrice?: null): WhitelistPriceEventFilter;
    WhitelistPrice(whitelistPrice?: null): WhitelistPriceEventFilter;
  };

  estimateGas: {
    /**
     * Access role
     */
    ACCESS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Access role
     */
    WHITELIST_ACCESS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function sets the max values for free whitelist
     */
    _setFreeWhitelistMaxValues(
      _freeWhitelistCapPerWallet: PromiseOrValue<BigNumberish>,
      _freeWhitelistMaxPerTx: PromiseOrValue<BigNumberish>,
      _freeWhitelistMaxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets the merkle root hash for free whitelist
     */
    _setFreeWhitelistMerkleRoot(
      _freeWhitelistRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets the merkle root hash for whitelist
     */
    _setWhitelistMerkleRoot(
      _whitelistRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets the whitelist price
     */
    _setWhitelistPrice(
      _whitelistPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores the base uri
     */
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function deletes the royalty info
     */
    deleteRoyalties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    /**
     * Stores max free whitelist cap
     */
    freeWhitelistCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Store free whitelist max per transaction
     */
    freeWhitelistMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores the max free whitelist supply
     */
    freeWhitelistMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * this function handles the livemint and takes the number of tokens to mint. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total livemint for account Mint and transfer to account.
     */
    liveMint(
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Stores the maximum cap per wallet, includes both WL and live mints
     */
    maxCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores max mint cap per wallet
     */
    mintCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores mint max mint per tx
     */
    mintMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores the mint price
     */
    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.
     */
    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets max cap per wallet for both WL and mint
     */
    setMaxCapPerWallet(
      _maxCapPerWallet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets the maximum total in a collection
     */
    setMaxLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets the max values for mint
     */
    setMintMaxValues(
      _mintCapPerWallet: PromiseOrValue<BigNumberish>,
      _mintMaxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets the mint price
     */
    setMintPrice(
      _mintPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets the royalty percentage for the collection
     */
    setRoyalties(
      _receiver: PromiseOrValue<string>,
      _feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStage(
      _stage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function sets the max values for whitelist
     */
    setWhitelistMaxValues(
      _whitelistCapPerWallet: PromiseOrValue<BigNumberish>,
      _whitelistMaxPerTx: PromiseOrValue<BigNumberish>,
      _whitelistMaxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stage(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function overrides the ERC721 tokenURI function. It returns the URI as `${baseURI}/${tokenId}`
     * gets token URI
     */
    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * this function upgrades the baseURI. All token metadata is stored in the baseURI as a JSON
     * upgrades the baseURI
     */
    upgradeBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Stores the max whitelist cap per wallet
     */
    whitelistCapPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores the max whitelist supply
     */
    whitelistMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function handles the whitelist mint and takes the number of tokens to mint and proof. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total whitelist mint for account and total whitelist mint. Mint and transfer to account.
     */
    whitelistMint(
      _quantity: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Stores the whitelist price
     */
    whitelistPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function enables the owner to withdraw funds from the contract
     */
    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Access role
     */
    ACCESS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Access role
     */
    WHITELIST_ACCESS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function sets the max values for free whitelist
     */
    _setFreeWhitelistMaxValues(
      _freeWhitelistCapPerWallet: PromiseOrValue<BigNumberish>,
      _freeWhitelistMaxPerTx: PromiseOrValue<BigNumberish>,
      _freeWhitelistMaxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets the merkle root hash for free whitelist
     */
    _setFreeWhitelistMerkleRoot(
      _freeWhitelistRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets the merkle root hash for whitelist
     */
    _setWhitelistMerkleRoot(
      _whitelistRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets the whitelist price
     */
    _setWhitelistPrice(
      _whitelistPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-approve}.
     */
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Stores the base uri
     */
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function deletes the royalty info
     */
    deleteRoyalties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    /**
     * Stores max free whitelist cap
     */
    freeWhitelistCapPerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Store free whitelist max per transaction
     */
    freeWhitelistMaxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Stores the max free whitelist supply
     */
    freeWhitelistMaxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * this function handles the livemint and takes the number of tokens to mint. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total livemint for account Mint and transfer to account.
     */
    liveMint(
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Stores the maximum cap per wallet, includes both WL and live mints
     */
    maxCapPerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Stores max mint cap per wallet
     */
    mintCapPerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Stores mint max mint per tx
     */
    mintMaxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Stores the mint price
     */
    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.
     */
    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets max cap per wallet for both WL and mint
     */
    setMaxCapPerWallet(
      _maxCapPerWallet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets the maximum total in a collection
     */
    setMaxLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets the max values for mint
     */
    setMintMaxValues(
      _mintCapPerWallet: PromiseOrValue<BigNumberish>,
      _mintMaxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets the mint price
     */
    setMintPrice(
      _mintPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets the royalty percentage for the collection
     */
    setRoyalties(
      _receiver: PromiseOrValue<string>,
      _feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStage(
      _stage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function sets the max values for whitelist
     */
    setWhitelistMaxValues(
      _whitelistCapPerWallet: PromiseOrValue<BigNumberish>,
      _whitelistMaxPerTx: PromiseOrValue<BigNumberish>,
      _whitelistMaxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function overrides the ERC721 tokenURI function. It returns the URI as `${baseURI}/${tokenId}`
     * gets token URI
     */
    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * this function upgrades the baseURI. All token metadata is stored in the baseURI as a JSON
     * upgrades the baseURI
     */
    upgradeBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Stores the max whitelist cap per wallet
     */
    whitelistCapPerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistMaxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Stores the max whitelist supply
     */
    whitelistMaxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function handles the whitelist mint and takes the number of tokens to mint and proof. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total whitelist mint for account and total whitelist mint. Mint and transfer to account.
     */
    whitelistMint(
      _quantity: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Stores the whitelist price
     */
    whitelistPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function enables the owner to withdraw funds from the contract
     */
    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}

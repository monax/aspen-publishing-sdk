/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface ICedarAgreementV0Interface extends utils.Interface {
  functions: {
    'acceptTerms()': FunctionFragment;
    'getAgreementStatus(address)': FunctionFragment;
    'setTermsStatus(bool)': FunctionFragment;
    'storeTermsAccepted(address,bytes)': FunctionFragment;
    'termsActivated()': FunctionFragment;
    'userAgreement()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptTerms'
      | 'getAgreementStatus'
      | 'setTermsStatus'
      | 'storeTermsAccepted'
      | 'termsActivated'
      | 'userAgreement',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptTerms', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAgreementStatus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTermsStatus', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'storeTermsAccepted',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'termsActivated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userAgreement', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'acceptTerms', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAgreementStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTermsStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'storeTermsAccepted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'termsActivated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userAgreement', data: BytesLike): Result;

  events: {};
}

export interface ICedarAgreementV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICedarAgreementV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptTerms(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getAgreementStatus(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { sig: boolean }>;

    setTermsStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    storeTermsAccepted(
      _acceptor: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    termsActivated(overrides?: CallOverrides): Promise<[boolean]>;

    userAgreement(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptTerms(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getAgreementStatus(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  setTermsStatus(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  storeTermsAccepted(
    _acceptor: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  termsActivated(overrides?: CallOverrides): Promise<boolean>;

  userAgreement(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptTerms(overrides?: CallOverrides): Promise<void>;

    getAgreementStatus(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    setTermsStatus(_status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    storeTermsAccepted(
      _acceptor: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    termsActivated(overrides?: CallOverrides): Promise<boolean>;

    userAgreement(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    acceptTerms(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getAgreementStatus(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setTermsStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    storeTermsAccepted(
      _acceptor: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    termsActivated(overrides?: CallOverrides): Promise<BigNumber>;

    userAgreement(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptTerms(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getAgreementStatus(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTermsStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    storeTermsAccepted(
      _acceptor: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    termsActivated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userAgreement(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_maxLimit",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AdminAccessControlled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxLimit",
          "type": "uint256"
        }
      ],
      "name": "ExceedsMaxLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMerkleProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxCapPerWalletNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxLimitNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WhitelistInputIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "whitelistMaxSupply",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "freeWhitelistSupply",
          "type": "uint64"
        }
      ],
      "name": "WhitelistSupplyIsLessThanFreeWhitelistSupply",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "FreeWhiteListStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "freeWhitelistCapPerWallet",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "freeWhitelistMaxPerTx",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "freeWhitelistMaxSupply",
          "type": "uint64"
        }
      ],
      "name": "FreeWhitelistMaxValues",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "FreeWhitelistMerkeRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "maxCapPerWallet",
          "type": "uint64"
        }
      ],
      "name": "MaxCapPerWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLimit",
          "type": "uint256"
        }
      ],
      "name": "MaxLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "mintCapPerWallet",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "mintMaxPerTx",
          "type": "uint64"
        }
      ],
      "name": "MintMaxValues",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        }
      ],
      "name": "MintPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whitelistCapPerWallet",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whitelistMaxPerTx",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "whitelistMaxSupply",
          "type": "uint64"
        }
      ],
      "name": "WhiteListMaxValues",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "WhitelistMerkeRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "whitelistPrice",
          "type": "uint256"
        }
      ],
      "name": "WhitelistPrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_freeWhitelistCapPerWallet",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_freeWhitelistMaxPerTx",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_freeWhitelistMaxSupply",
          "type": "uint64"
        }
      ],
      "name": "_setFreeWhitelistMaxValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_freeWhitelistRoot",
          "type": "bytes32"
        }
      ],
      "name": "_setFreeWhitelistMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_whitelistRoot",
          "type": "bytes32"
        }
      ],
      "name": "_setWhitelistMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_whitelistPrice",
          "type": "uint256"
        }
      ],
      "name": "_setWhitelistPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeWhitelistCapPerWallet",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeWhitelistMaxPerTx",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeWhitelistMaxSupply",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        }
      ],
      "name": "liveMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCapPerWallet",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCapPerWallet",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintMaxPerTx",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_maxCapPerWallet",
          "type": "uint64"
        }
      ],
      "name": "setMaxCapPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLimit",
          "type": "uint256"
        }
      ],
      "name": "setMaxLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_mintCapPerWallet",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_mintMaxPerTx",
          "type": "uint64"
        }
      ],
      "name": "setMintMaxValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StageChecker.Stages",
          "name": "_stage",
          "type": "uint8"
        }
      ],
      "name": "setStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_whitelistCapPerWallet",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_whitelistMaxPerTx",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_whitelistMaxSupply",
          "type": "uint64"
        }
      ],
      "name": "setWhitelistMaxValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stage",
      "outputs": [
        {
          "internalType": "enum StageChecker.Stages",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "upgradeBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistCapPerWallet",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMaxPerTx",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMaxSupply",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
  "receipt": {
    "to": null,
    "from": "0xd82A3e8030f10148715951e3be5ceea2873dfb54",
    "contractAddress": "0x969c6980ab6C49d3a85241827Ae10964D95560C9",
    "transactionIndex": 1,
    "gasUsed": "3444893",
    "logsBloom": "0x
    "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16",
    "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27372130,
        "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
        "address": "0x969c6980ab6C49d3a85241827Ae10964D95560C9",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27372130,
        "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
        "address": "0x969c6980ab6C49d3a85241827Ae10964D95560C9",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x15a6d0bb3aa80eeb8af9e60b6fcf74e11d27ec8b6e2b1a0b22e29d447fac5d96",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27372130,
        "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
        "address": "0x969c6980ab6C49d3a85241827Ae10964D95560C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d82a3e8030f10148715951e3be5ceea2873dfb54",
          "0x000000000000000000000000d82a3e8030f10148715951e3be5ceea2873dfb54"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27372130,
        "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
        "address": "0x969c6980ab6C49d3a85241827Ae10964D95560C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x15a6d0bb3aa80eeb8af9e60b6fcf74e11d27ec8b6e2b1a0b22e29d447fac5d96",
          "0x000000000000000000000000d82a3e8030f10148715951e3be5ceea2873dfb54",
          "0x000000000000000000000000d82a3e8030f10148715951e3be5ceea2873dfb54"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27372130,
        "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
        "address": "0x969c6980ab6C49d3a85241827Ae10964D95560C9",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27372130,
        "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
        "address": "0x969c6980ab6C49d3a85241827Ae10964D95560C9",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7def632d64a7259044c921303d544f945a340c8d4334adc0e0bd830a54deb528",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27372130,
        "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
        "address": "0x969c6980ab6C49d3a85241827Ae10964D95560C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7def632d64a7259044c921303d544f945a340c8d4334adc0e0bd830a54deb528",
          "0x000000000000000000000000d82a3e8030f10148715951e3be5ceea2873dfb54",
          "0x000000000000000000000000d82a3e8030f10148715951e3be5ceea2873dfb54"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27372130,
        "transactionHash": "0xdd851a4451515aef10be3ab754574923b0a2d1b684261f9d654ba65e1b5b0b19",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d82a3e8030f10148715951e3be5ceea2873dfb54",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001bfb13c03f8981800000000000000000000000000000000000000000000010b0c864a92a290a8eb0000000000000000000000000000000000000000000020b040722bdc8124ada200000000000000000000000000000000000000000000010b0ac699569e9810d30000000000000000000000000000000000000000000020b04231dd18851d45ba",
        "logIndex": 8,
        "blockHash": "0x95b90b87d2247c6b1675273cc12db6072b2d29138c826c855036a976862eae16"
      }
    ],
    "blockNumber": 27372130,
    "cumulativeGasUsed": "3469056",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Fancurve",
    "FCR",
    10000,
    "/ipfs/QmYA2fn8cMbVWo4v95RwcwJVyQsNtnEwHerfWR8UNtEowE",
    "0xd82A3e8030f10148715951e3be5ceea2873dfb54"
  ],
  "numDeployments": 2,
  "solcInputHash": "11aa7e61532da3e9110572c480954e49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdminAccessControlled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"name\":\"ExceedsMaxLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCapPerWalletNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLimitNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhitelistInputIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"whitelistMaxSupply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"freeWhitelistSupply\",\"type\":\"uint64\"}],\"name\":\"WhitelistSupplyIsLessThanFreeWhitelistSupply\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"FreeWhiteListStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"freeWhitelistCapPerWallet\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"freeWhitelistMaxPerTx\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"freeWhitelistMaxSupply\",\"type\":\"uint64\"}],\"name\":\"FreeWhitelistMaxValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"FreeWhitelistMerkeRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"maxCapPerWallet\",\"type\":\"uint64\"}],\"name\":\"MaxCapPerWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"name\":\"MaxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"mintCapPerWallet\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"mintMaxPerTx\",\"type\":\"uint64\"}],\"name\":\"MintMaxValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"MintPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whitelistCapPerWallet\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whitelistMaxPerTx\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"whitelistMaxSupply\",\"type\":\"uint64\"}],\"name\":\"WhiteListMaxValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"WhitelistMerkeRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"whitelistPrice\",\"type\":\"uint256\"}],\"name\":\"WhitelistPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_freeWhitelistCapPerWallet\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_freeWhitelistMaxPerTx\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_freeWhitelistMaxSupply\",\"type\":\"uint64\"}],\"name\":\"_setFreeWhitelistMaxValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_freeWhitelistRoot\",\"type\":\"bytes32\"}],\"name\":\"_setFreeWhitelistMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistRoot\",\"type\":\"bytes32\"}],\"name\":\"_setWhitelistMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistPrice\",\"type\":\"uint256\"}],\"name\":\"_setWhitelistPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeWhitelistCapPerWallet\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeWhitelistMaxPerTx\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeWhitelistMaxSupply\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"}],\"name\":\"liveMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapPerWallet\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCapPerWallet\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMaxPerTx\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxCapPerWallet\",\"type\":\"uint64\"}],\"name\":\"setMaxCapPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_mintCapPerWallet\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_mintMaxPerTx\",\"type\":\"uint64\"}],\"name\":\"setMintMaxValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StageChecker.Stages\",\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"setStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_whitelistCapPerWallet\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_whitelistMaxPerTx\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_whitelistMaxSupply\",\"type\":\"uint64\"}],\"name\":\"setWhitelistMaxValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"enum StageChecker.Stages\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"upgradeBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistCapPerWallet\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMaxPerTx\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMaxSupply\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Monax Labs\",\"kind\":\"dev\",\"methods\":{\"_setFreeWhitelistMaxValues(uint64,uint64,uint64)\":{\"details\":\"this function sets the max values for free whitelist\"},\"_setFreeWhitelistMerkleRoot(bytes32)\":{\"details\":\"this function sets the merkle root hash for free whitelist\"},\"_setWhitelistMerkleRoot(bytes32)\":{\"details\":\"this function sets the merkle root hash for whitelist\"},\"_setWhitelistPrice(uint256)\":{\"details\":\"this function sets the whitelist price\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"deleteRoyalties()\":{\"details\":\"this function deletes the royalty info\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"liveMint(uint64)\":{\"details\":\"this function handles the livemint and takes the number of tokens to mint. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total livemint for account Mint and transfer to account.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setMaxCapPerWallet(uint64)\":{\"details\":\"this function sets max cap per wallet for both WL and mint\"},\"setMaxLimit(uint256)\":{\"details\":\"this function sets the maximum total in a collection\"},\"setMintMaxValues(uint64,uint64)\":{\"details\":\"this function sets the max values for mint\"},\"setMintPrice(uint256)\":{\"details\":\"this function sets the mint price\"},\"setRoyalties(address,uint96)\":{\"details\":\"this function sets the royalty percentage for the collection\"},\"setWhitelistMaxValues(uint64,uint64,uint64)\":{\"details\":\"this function sets the max values for whitelist\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"this function overrides the ERC721 tokenURI function. It returns the URI as `${baseURI}/${tokenId}`\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"upgradeBaseURI(string)\":{\"details\":\"this function upgrades the baseURI. All token metadata is stored in the baseURI as a JSON\"},\"whitelistMint(uint64,bytes32[])\":{\"details\":\"this function handles the whitelist mint and takes the number of tokens to mint and proof. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total whitelist mint for account and total whitelist mint. Mint and transfer to account.\"},\"withdraw()\":{\"details\":\"this function enables the owner to withdraw funds from the contract\"}},\"title\":\"ERC721 Cedar contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ACCESS_ROLE()\":{\"notice\":\"Access role \"},\"WHITELIST_ACCESS_ROLE()\":{\"notice\":\"Access role\"},\"baseURI()\":{\"notice\":\"Stores the base uri\"},\"freeWhitelistCapPerWallet()\":{\"notice\":\"Stores max free whitelist cap\"},\"freeWhitelistMaxPerTx()\":{\"notice\":\"Store free whitelist max per transaction\"},\"freeWhitelistMaxSupply()\":{\"notice\":\"Stores the max free whitelist supply\"},\"maxCapPerWallet()\":{\"notice\":\"Stores the maximum cap per wallet, includes both WL and live mints\"},\"mintCapPerWallet()\":{\"notice\":\"Stores max mint cap per wallet\"},\"mintMaxPerTx()\":{\"notice\":\"Stores mint max mint per tx\"},\"mintPrice()\":{\"notice\":\"Stores the mint price\"},\"tokenURI(uint256)\":{\"notice\":\"gets token URI\"},\"upgradeBaseURI(string)\":{\"notice\":\"upgrades the baseURI\"},\"whitelistCapPerWallet()\":{\"notice\":\"Stores the max whitelist cap per wallet\"},\"whitelistMaxSupply()\":{\"notice\":\"Stores the max whitelist supply\"},\"whitelistPrice()\":{\"notice\":\"Stores the whitelist price\"}},\"notice\":\"The contract supports whitelists and live mint.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cedar/ERC721CedarLivemint.sol\":\"ERC721CedarLivemint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address, uint256)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x73a07d6155bb2549828bf1ce4dce2300b5d78c958acb922e61a3341ea4279c97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/cedar/ERC721CedarLivemint.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// import \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"./interfaces/IERC721CedarLivemint.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\nimport \\\"./MintInfo.sol\\\";\\nimport \\\"./libraries/StageChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Cedar contract\\n * @notice The contract supports whitelists and live mint.\\n * @author Monax Labs\\n */\\n\\ncontract ERC721CedarLivemint is IERC721CedarLivemint, ERC721A, Whitelist, MintInfo, ERC2981 {\\n    using Strings for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /// Stores the base uri\\n    string public baseURI;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// Checks whether the max limit in the collection has been set, and max cap per wallet has been set. Checks don't apply if caller is owner\\n    modifier checkValues() {\\n        if (_msgSender() != owner) {\\n            if (!maxLimitSet) revert MaxLimitNotSet();\\n            if (!maxCapPerWalletSet) revert MaxCapPerWalletNotSet();\\n            _;\\n        }\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _maxLimit,\\n        string memory baseURI_,\\n        address _owner\\n    ) ERC721A(_name, _symbol) MintInfo(_owner, _maxLimit) Whitelist(_owner) {\\n        baseURI = baseURI_;\\n    }\\n\\n    /** @dev\\n        this function handles the whitelist mint and takes the number of tokens to mint and proof.\\n        It executes the following checks:\\n        1. Have required values been set?\\n        2-5. Are the totals <= max values set?\\n        6. Is the payment == price * number of tokens?\\n        7. Is the merke proof verified?\\n        If all return true, increment quantity to total whitelist mint for account and total whitelist mint.\\n        Mint and transfer to account.\\n        */\\n\\n    function whitelistMint(uint64 _quantity, bytes32[] calldata _proof) external payable checkValues {\\n        StageChecker.runGeneralChecks(\\n            stage,\\n            _quantity,\\n            whitelistMaxPerTx,\\n            maxLimit,\\n            _totalMinted(),\\n            mintData[_msgSender()].freeWhitelistTotal,\\n            mintData[_msgSender()].whitelistTotal,\\n            mintData[_msgSender()].mintTotal,\\n            maxCapPerWallet\\n        );\\n\\n        if (stage == StageChecker.Stages.FreeWhitelist) {\\n            StageChecker.runFreeWhitelistChecks(\\n                stage,\\n                mintData[_msgSender()].mintTotal,\\n                mintData[_msgSender()].freeWhitelistTotal,\\n                freeWhitelistTotalMinted,\\n                _quantity,\\n                freeWhitelistCapPerWallet,\\n                freeWhitelistMaxSupply\\n            );\\n            verify(_proof, freeWhitelistRoot);\\n            _calculateUserFreeWhitelistTotal(_msgSender(), _quantity);\\n            _calculateFreeWhitelistTotal(_quantity);\\n            _safeMint(_msgSender(), _quantity);\\n        } else if (stage == StageChecker.Stages.Whitelist) {\\n            StageChecker.runWhitelistChecks(\\n                stage,\\n                whitelistMaxValuesSet,\\n                whitelistPriceSet,\\n                mintData[_msgSender()].whitelistTotal,\\n                _quantity,\\n                mintData[_msgSender()].mintTotal,\\n                whitelistTotalMinted,\\n                whitelistMaxSupply,\\n                whitelistCapPerWallet\\n            );\\n\\n            checkPayment(msg.value, whitelistPrice, _quantity);\\n            verify(_proof, whitelistRoot);\\n            _calculateUserWhitelistTotal(_msgSender(), _quantity);\\n            _calculateWhitelistTotal(_quantity);\\n            _safeMint(_msgSender(), _quantity);\\n        } else {\\n            revert InvalidStage();\\n        }\\n    }\\n\\n    /** @dev\\n        this function handles the livemint and takes the number of tokens to mint.\\n        It executes the following checks:\\n        1. Have required values been set?\\n        2-5. Are the totals <= max values set?\\n        6. Is the payment == price * number of tokens?\\n        7. Is the merke proof verified?\\n        If all return true, increment quantity to total livemint for account\\n        Mint and transfer to account.\\n        */\\n\\n    function liveMint(uint64 _quantity) external payable checkValues {\\n        if (stage == StageChecker.Stages.Premint && _msgSender() == owner) {\\n            if (_totalMinted() + uint256(_quantity) > maxLimit) revert ExceedsMaxLimit(maxLimit);\\n            _safeMint(_msgSender(), _quantity);\\n        } else if (stage == StageChecker.Stages.Public) {\\n            StageChecker.runGeneralChecks(\\n                stage,\\n                _quantity,\\n                whitelistMaxPerTx,\\n                maxLimit,\\n                _totalMinted(),\\n                mintData[_msgSender()].freeWhitelistTotal,\\n                mintData[_msgSender()].whitelistTotal,\\n                mintData[_msgSender()].mintTotal,\\n                maxCapPerWallet\\n            );\\n            checkPayment(msg.value, mintPrice, _quantity);\\n            MintInfo._calculateUserMintTotal(_msgSender(), _quantity);\\n            _safeMint(_msgSender(), _quantity);\\n        } else {\\n            revert InvalidStage();\\n        }\\n    }\\n\\n    function checkPayment(\\n        uint256 _payment,\\n        uint256 _price,\\n        uint64 _quantity\\n    ) internal pure {\\n        uint256 price = _price * uint256(_quantity);\\n        if (_payment != price) revert InsufficientPayment(_payment, price);\\n    }\\n\\n    function verify(bytes32[] calldata _proof, bytes32 _root) internal view {\\n        if (!_verify(_proof, _root, keccak256(abi.encodePacked(_msgSender())))) revert InvalidMerkleProof();\\n    }\\n\\n    /// @dev this function sets the max values for whitelist\\n    function setWhitelistMaxValues(\\n        uint64 _whitelistCapPerWallet,\\n        uint64 _whitelistMaxPerTx,\\n        uint64 _whitelistMaxSupply\\n    ) external onlyAdmin {\\n        if (_whitelistMaxSupply > maxLimit) revert ExceedsMaxLimit(maxLimit);\\n        _setWhitelistMaxValues(_whitelistCapPerWallet, _whitelistMaxPerTx, _whitelistMaxSupply);\\n    }\\n\\n    /// @dev this function sets the royalty percentage for the collection\\n    function setRoyalties(address _receiver, uint96 _feeNumerator) external onlyAdmin {\\n        _setDefaultRoyalty(_receiver, _feeNumerator);\\n    }\\n\\n    /// @dev this function deletes the royalty info\\n    function deleteRoyalties() external onlyAdmin {\\n        _deleteDefaultRoyalty();\\n    }\\n\\n    ///@dev this function enables the owner to withdraw funds from the contract\\n    function withdraw() external onlyAdmin {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"ERC721: No balance to withdraw\\\");\\n        (bool success,) = payable(msg.sender).call{value : balance}(\\\"\\\");\\n        require(success, \\\"ERC721: Failed to withdraw payment\\\");\\n    }\\n\\n    ///@dev this function logs an event when ether is transferred to the contract without calldata\\n    receive() external payable {\\n        emit Received(_msgSender(), msg.value);\\n    }\\n\\n    /// @notice upgrades the baseURI\\n    /// @dev this function upgrades the baseURI. All token metadata is stored in the baseURI as a JSON\\n    function upgradeBaseURI(string calldata baseURI_) public onlyAdmin {\\n        baseURI = baseURI_;\\n    }\\n\\n    /// @dev this function returns the baseURI\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /// @notice gets token URI\\n    /// @dev this function overrides the ERC721 tokenURI function. It returns the URI as `${baseURI}/${tokenId}`\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory base = _baseURI();\\n        return bytes(base).length > 0 ? string(abi.encodePacked(base, \\\"/\\\", _tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721A, ERC2981, AccessControl)\\n    returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2807a717f99e5f97cef0ec07b45e4b1ea02a0da0a5b2fa526b6ffb1542db7144\",\"license\":\"Apache-2.0\"},\"contracts/cedar/MintInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interfaces/IMintInfoEvents.sol\\\";\\nimport \\\"./interfaces/IMintInfoErrors.sol\\\";\\nimport \\\"./interfaces/IAdminErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./libraries/StageChecker.sol\\\";\\n\\n\\nabstract contract MintInfo is AccessControl, IMintInfoEvents, IMintInfoErrors, IAdminErrors { \\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /// Keeps a track of the total minted for whitelist, freewhitelist, mint, and free mint\\n    struct MintData {\\n    uint64 whitelistTotal;\\n    uint64 mintTotal;\\n    uint64 freeWhitelistTotal;\\n    }\\n\\n    /// Stores the owner's address\\n    address owner;\\n    /// Stores the mint price\\n    uint256 public mintPrice;\\n    /// Stores the maximum cap per wallet, includes both WL and live mints\\n    uint64 public maxCapPerWallet;\\n    /// Stores the max mint per tx\\n    uint64 maxMintPerBatch;\\n    /// Stores max mint cap per wallet\\n    uint64 public mintCapPerWallet;\\n    /// Stores mint max mint per tx\\n    uint64 public mintMaxPerTx;\\n    // Returns true when mint price is set\\n    bool mintPriceSet;\\n    /// Returns true when mint max values are set \\n    bool mintMaxValuesSet;\\n    // Returns true when max cap per wallet is set\\n    bool maxCapPerWalletSet;\\n    /// Stores the free whitelist status\\n    bool freeWhitelistStatus;\\n    /// stores info for total mint to ensure that mint does not exceed the capped amount\\n    mapping(address => MintData) mintData;\\n    /// Stores the max limit in the collection\\n    uint256 maxLimit;\\n    /// Returns true when the max limit is set\\n    bool maxLimitSet;\\n\\n    StageChecker.Stages public stage = StageChecker.Stages.Premint;\\n    \\n    /// Access role \\n    bytes32 public constant ACCESS_ROLE = keccak256(\\\"ACCESS_ROLE\\\");\\n\\n    modifier onlyAdmin() {\\n    if(!hasRole(ACCESS_ROLE, _msgSender())) revert AdminAccessControlled();\\n      _;\\n    }\\n\\n   \\n    constructor(address _owner, uint256 _maxLimit) {\\n        maxLimit = _maxLimit;\\n        if (maxLimit > 0) maxLimitSet = true;\\n        owner = _owner;\\n        /// @dev only Admin (the owner) can grant/revoke admin roles\\n        _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n        /// @dev only Admin can grant/revoke access roles\\n        _setRoleAdmin(ACCESS_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        /// @dev this function sets the owner as admin and gives owner an access role\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\\n        _setupRole(ACCESS_ROLE, owner);\\n        ///@dev this function gives the deployer account an access role\\n        _setupRole(ACCESS_ROLE, _msgSender());\\n    }\\n\\n    function setStage(StageChecker.Stages _stage) external onlyAdmin {\\n        stage = _stage;\\n    }\\n\\n    /// @dev this function sets the maximum total in a collection\\n    function setMaxLimit(uint256 _maxLimit) external onlyAdmin {\\n        if(maxLimit == 0) revert InputIsZero();\\n        maxLimit = _maxLimit;\\n        maxLimitSet = true;\\n        emit MaxLimit(_maxLimit);\\n    }\\n    /// @dev this function sets the max values for mint\\n    function setMintMaxValues(uint64 _mintCapPerWallet, uint64 _mintMaxPerTx) external onlyAdmin {\\n        if(_mintCapPerWallet == 0 || _mintMaxPerTx == 0) revert InputIsZero();\\n        mintCapPerWallet = _mintCapPerWallet;\\n        mintMaxPerTx = _mintMaxPerTx;\\n        mintMaxValuesSet = true;\\n        emit MintMaxValues(_mintCapPerWallet, _mintMaxPerTx);\\n    }\\n\\n    ///@dev this function sets the mint price\\n    function setMintPrice(uint256 _mintPrice) external onlyAdmin {\\n        if(_mintPrice == 0) revert InputIsZero();\\n        mintPrice = _mintPrice;\\n        mintPriceSet = true;\\n        emit MintPrice(_mintPrice);\\n    }\\n\\n    ///@dev this function sets max cap per wallet for both WL and mint\\n    function setMaxCapPerWallet(uint64 _maxCapPerWallet) external onlyAdmin {\\n        if(_maxCapPerWallet == 0) revert InputIsZero();\\n        maxCapPerWallet = _maxCapPerWallet; \\n        maxCapPerWalletSet = true;\\n        emit MaxCapPerWallet(_maxCapPerWallet);\\n    }\\n\\n\\n    function _calculateUserFreeWhitelistTotal(address _user, uint64 _quantity) internal  {\\n        mintData[_user].freeWhitelistTotal += _quantity;\\n    }\\n\\n    function _calculateUserWhitelistTotal(address _user, uint64 _quantity) internal  {\\n        mintData[_user].whitelistTotal += _quantity;\\n    }\\n\\n    function _calculateUserMintTotal(address _user, uint64 _quantity) internal  {\\n    mintData[_user].mintTotal += _quantity;\\n    }\\n\\n}\",\"keccak256\":\"0x4bee9b7eda0191f17f49a4faf519ef06d954a8185bc45eca12cc2489c4011ea0\",\"license\":\"MIT\"},\"contracts/cedar/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interfaces/IWhitelistEvents.sol\\\";\\nimport \\\"./interfaces/IWhitelistErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IAdminErrors.sol\\\";\\n\\nabstract contract Whitelist is AccessControl, IWhitelistEvents, IWhitelistErrors, IAdminErrors {\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /// Stores the whitelist price\\n    uint256 public whitelistPrice;\\n    /// Returns true when whitelist price is set\\n    bool whitelistPriceSet;\\n    /// Returns true when whitelist max values are set\\n    bool whitelistMaxValuesSet;\\n    /// Returns true when free whitelist max values are set\\n    bool freeWhitelistMaxValuesSet;\\n    /// Stores the max whitelist cap per wallet\\n    uint64 public whitelistCapPerWallet;\\n    /// Stores max free whitelist cap\\n    uint64 public freeWhitelistCapPerWallet;\\n    // /// Stores WL max mint per tx\\n    uint64 public whitelistMaxPerTx;\\n    /// Store free whitelist max per transaction\\n    uint64 public freeWhitelistMaxPerTx;\\n    /// Stores total for whitelist minted\\n    uint64 whitelistTotalMinted;\\n    /// Stores the total for free whitelist minted\\n    uint64 freeWhitelistTotalMinted;\\n    /// Stores the max whitelist supply\\n    uint64 public whitelistMaxSupply;\\n    /// Stores the max free whitelist supply\\n    uint64 public freeWhitelistMaxSupply;\\n    /// Stores the merkle root hash for whitelist\\n    bytes32 whitelistRoot;\\n    /// Stores the merke root hash for free whitelist\\n    bytes32 freeWhitelistRoot;\\n    /// Stores owner address\\n    address whitelistOwner;\\n    /// Access role\\n    bytes32 public constant WHITELIST_ACCESS_ROLE = keccak256(\\\"WHITELIST_ACCESS_ROLE\\\");\\n\\n    modifier onlyWhitelistAdmin() {\\n        if (!hasRole(WHITELIST_ACCESS_ROLE, _msgSender())) revert AdminAccessControlled();\\n        _;\\n    }\\n\\n    constructor(address _whitelistOwner) {\\n        whitelistOwner = _whitelistOwner;\\n        /// @dev only Admin (the owner) can grant/revoke admin roles\\n        _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n        /// @dev only Admin can grant/revoke access roles\\n        _setRoleAdmin(WHITELIST_ACCESS_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        /// @dev this function sets the owner as admin and gives owner an access role\\n        _setupRole(DEFAULT_ADMIN_ROLE, whitelistOwner);\\n        _setupRole(WHITELIST_ACCESS_ROLE, whitelistOwner);\\n        ///@dev this function gives the deployer account an access role\\n        _setupRole(WHITELIST_ACCESS_ROLE, _msgSender());\\n    }\\n\\n    /* ========== FUNCTIONS ========== */\\n\\n    /// @dev this function sets the max values for whitelist\\n    function _setWhitelistMaxValues(\\n        uint64 _whitelistCapPerWallet,\\n        uint64 _whitelistMaxPerTx,\\n        uint64 _whitelistMaxSupply\\n    ) internal onlyWhitelistAdmin {\\n        if (_whitelistCapPerWallet == 0 || _whitelistMaxPerTx == 0 || _whitelistMaxSupply == 0)\\n            revert WhitelistInputIsZero();\\n        whitelistCapPerWallet = _whitelistCapPerWallet;\\n        whitelistMaxPerTx = _whitelistMaxPerTx;\\n        whitelistMaxSupply = _whitelistMaxSupply;\\n        whitelistMaxValuesSet = true;\\n        emit WhiteListMaxValues(_whitelistMaxSupply, _whitelistMaxPerTx, _whitelistMaxSupply);\\n    }\\n\\n    /// @dev this function sets the max values for free whitelist\\n    function _setFreeWhitelistMaxValues(\\n        uint64 _freeWhitelistCapPerWallet,\\n        uint64 _freeWhitelistMaxPerTx,\\n        uint64 _freeWhitelistMaxSupply\\n    ) external onlyWhitelistAdmin {\\n        if (_freeWhitelistCapPerWallet == 0 || _freeWhitelistMaxPerTx == 0 || _freeWhitelistMaxSupply == 0)\\n            revert WhitelistInputIsZero();\\n        if (_freeWhitelistMaxSupply > whitelistMaxSupply)\\n            revert WhitelistSupplyIsLessThanFreeWhitelistSupply(whitelistMaxSupply, _freeWhitelistMaxSupply);\\n        freeWhitelistCapPerWallet = _freeWhitelistCapPerWallet;\\n        freeWhitelistMaxPerTx = _freeWhitelistMaxPerTx;\\n        freeWhitelistMaxSupply = _freeWhitelistMaxSupply;\\n        freeWhitelistMaxValuesSet = true;\\n        emit FreeWhitelistMaxValues(_freeWhitelistCapPerWallet, _freeWhitelistMaxPerTx, _freeWhitelistMaxSupply);\\n    }\\n\\n    /// @dev this function sets the whitelist price\\n    function _setWhitelistPrice(uint256 _whitelistPrice) external onlyWhitelistAdmin {\\n        if (_whitelistPrice == 0) revert WhitelistInputIsZero();\\n        whitelistPrice = _whitelistPrice;\\n        whitelistPriceSet = true;\\n        emit WhitelistPrice(_whitelistPrice);\\n    }\\n\\n    /// @dev this function sets the merkle root hash for whitelist\\n    function _setWhitelistMerkleRoot(bytes32 _whitelistRoot) external onlyWhitelistAdmin {\\n        whitelistRoot = _whitelistRoot;\\n        emit WhitelistMerkeRoot(_whitelistRoot);\\n    }\\n\\n    /// @dev this function sets the merkle root hash for free whitelist\\n    function _setFreeWhitelistMerkleRoot(bytes32 _freeWhitelistRoot) external onlyWhitelistAdmin {\\n        freeWhitelistRoot = _freeWhitelistRoot;\\n        emit FreeWhitelistMerkeRoot(_freeWhitelistRoot);\\n    }\\n\\n    /// @dev this function utilises the MerkeProof OZ contract to verify the proof\\n    function _verify(\\n        bytes32[] memory _proof,\\n        bytes32 _root,\\n        bytes32 _leaf\\n    ) internal pure returns (bool) {\\n        return MerkleProof.verify(_proof, _root, _leaf);\\n    }\\n\\n    function _calculateFreeWhitelistTotal(uint64 _quantity) internal {\\n        freeWhitelistTotalMinted += _quantity;\\n    }\\n\\n    function _calculateWhitelistTotal(uint64 _quantity) internal {\\n        whitelistTotalMinted += _quantity;\\n    }\\n}\",\"keccak256\":\"0x19cb92443c5aefe31e2944e7d1d8bd137ee0a15d49137595ec0dcdb9e09e8016\",\"license\":\"MIT\"},\"contracts/cedar/interfaces/IAdminErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IAdminErrors {\\n    error AdminAccessControlled();\\n}\\n\",\"keccak256\":\"0x080e311d6c6574f0f8622d61a1f8581b29250bf822a4f6aecef67434283ed834\",\"license\":\"Apache-2.0\"},\"contracts/cedar/interfaces/IERC721CedarLivemint.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC721CedarLivemintEvents.sol\\\";\\n\\nimport \\\"./IERC721CedarLivemintErrors.sol\\\";\\n\\ninterface IERC721CedarLivemint is IERC721CedarLivemintEvents, IERC721CedarLivemintErrors {}\\n\",\"keccak256\":\"0x9a50ec829bbd0d3047f7593dbc455fccd19286f9276731d001c7f42a73928d34\",\"license\":\"Apache-2.0\"},\"contracts/cedar/interfaces/IERC721CedarLivemintErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n\\ninterface IERC721CedarLivemintErrors {\\n\\n    error MaxLimitNotSet();\\n    error MaxCapPerWalletNotSet();\\n    error InvalidMerkleProof();\\n    error InvalidStage();\\n    error InsufficientPayment(uint256 payment, uint256 price);\\n    error ExceedsMaxLimit(uint256 maxLimit);\\n\\n}\\n\",\"keccak256\":\"0xa764e5010f28c7ac4676c4ebdf128fdf9ad3db37ae8f03383fcead9180c19e26\",\"license\":\"Apache-2.0\"},\"contracts/cedar/interfaces/IERC721CedarLivemintEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IERC721CedarLivemintEvents {\\n\\n    event BaseURI(string baseURI);\\n    event Received(address sender, uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x94fcc5a99076ca98f6612aa19d4bf088508f152f3e8f1d3c18498822a86e9428\",\"license\":\"Apache-2.0\"},\"contracts/cedar/interfaces/IMintInfoErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IMintInfoErrors {\\n    error InputIsZero();\\n}\\n\",\"keccak256\":\"0x56888e831bc1a22f02a98564f9b484991d32157cdf7f035f7d2a175ba6cb677d\",\"license\":\"Apache-2.0\"},\"contracts/cedar/interfaces/IMintInfoEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IMintInfoEvents {\\n    event MaxLimit(uint256 maxLimit);\\n    event MintMaxValues(uint64 mintCapPerWallet, uint64 mintMaxPerTx);\\n    event MintPrice(uint256 mintPrice);\\n    event MaxCapPerWallet(uint64 maxCapPerWallet);\\n}\\n\",\"keccak256\":\"0x7bc34ac046699f274c546525179d9ae966d532da0eb377658e1160f6acdd2f2f\",\"license\":\"Apache-2.0\"},\"contracts/cedar/interfaces/IWhitelistErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IWhitelistErrors {\\n    error WhitelistInputIsZero();\\n    error WhitelistSupplyIsLessThanFreeWhitelistSupply(uint64 whitelistMaxSupply, uint64 freeWhitelistSupply);\\n}\\n\",\"keccak256\":\"0xf80d9b7822f1aed0ed863a676000c6ed0778c314e2b4817d03ee7c2751593edf\",\"license\":\"Apache-2.0\"},\"contracts/cedar/interfaces/IWhitelistEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IWhitelistEvents {\\n    event WhiteListMaxValues(uint64 whitelistCapPerWallet, uint64 whitelistMaxPerTx, uint64 whitelistMaxSupply);\\n    event FreeWhitelistMaxValues(uint64 freeWhitelistCapPerWallet, uint64 freeWhitelistMaxPerTx, uint64 freeWhitelistMaxSupply);\\n    event WhitelistPrice(uint256 whitelistPrice);\\n    event WhitelistMerkeRoot(bytes32 root);\\n    event FreeWhitelistMerkeRoot(bytes32 root);\\n    event FreeWhiteListStatus(bool status);\\n }\\n\",\"keccak256\":\"0x34def73113c2ac10e766cbbc4fe5446ffcc66697d36c3ec4010f318d8a46cfcf\",\"license\":\"Apache-2.0\"},\"contracts/cedar/libraries/StageChecker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\nlibrary StageChecker {\\n    enum Stages {\\n        Premint,\\n        FreeWhitelist,\\n        Whitelist,\\n        Public\\n    }\\n\\n    error ExceedsMaxLimit(uint256 maxLimit);\\n    error ExceedsMaxPerTx(Stages stage, uint64 quantity, uint64 maxPerTx);\\n    error ExceedsCapPerWallet(Stages stage, uint64 total, uint64 capPerWallet);\\n    error ExceedsMaxCapPerWallet(uint64 total, uint64 maxCapPerWallet);\\n    error ExceedsMaxSupply(Stages stage, uint64 total, uint64 maxSupply);\\n    error RequiredValuesNotSet(Stages stage, bool maxValuesSet, bool priceSet);\\n\\n    function runGeneralChecks(\\n        Stages _stage,\\n        uint64 _quantity,\\n        uint64 _maxPerTx,\\n        uint256 _maxLimit,\\n        uint256 _totalMinted,\\n        uint64 _userFreeWhitelistTotal,\\n        uint64 _userWhitelistTotal,\\n        uint64 _userMintTotal,\\n        uint64 _maxCapPerWallet\\n    ) external pure {\\n        if (_quantity > _maxPerTx) revert ExceedsMaxPerTx(_stage, _quantity, _maxPerTx);\\n\\n        if (_totalMinted + uint256(_quantity) > _maxLimit) revert ExceedsMaxLimit(_maxLimit);\\n\\n        uint64 freeWhitelistTotal = _userFreeWhitelistTotal + _quantity;\\n        uint64 whitelistTotal = _userWhitelistTotal + _quantity;\\n        uint64 mintTotal = _userMintTotal + _quantity;\\n\\n        uint64 total = freeWhitelistTotal + whitelistTotal + mintTotal;\\n        if (total > _maxCapPerWallet) revert ExceedsMaxCapPerWallet(total, _maxCapPerWallet);\\n    }\\n\\n    function runFreeWhitelistChecks(\\n        Stages _stage,\\n        uint64 _userMintTotal,\\n        uint64 _userFreeWhitelistTotal,\\n        uint64 _freeWhitelistTotalMinted,\\n        uint64 _quantity,\\n        uint64 _capPerWallet,\\n        uint64 _freeWhitelistMaxSupply\\n    ) external pure {\\n        uint64 mintTotal = _userMintTotal + _quantity;\\n        uint64 freeWhitelistTotal = _userFreeWhitelistTotal + _quantity;\\n        uint64 totalFreeWhitelist = _freeWhitelistTotalMinted + _quantity;\\n        if (freeWhitelistTotal > _freeWhitelistMaxSupply)\\n            revert ExceedsMaxSupply(_stage, totalFreeWhitelist, _freeWhitelistMaxSupply);\\n        if (freeWhitelistTotal > _capPerWallet) revert ExceedsCapPerWallet(_stage, mintTotal, _capPerWallet);\\n    }\\n\\n    function runWhitelistChecks(\\n        Stages _stage,\\n        bool _maxValueSet,\\n        bool _priceSet,\\n        uint64 _userWhitelistTotal,\\n        uint64 _quantity,\\n        uint64 _userMintTotal,\\n        uint64 _whitelistTotalMinted,\\n        uint64 _whitelistMaxSupply,\\n        uint64 _capPerWallet\\n    ) external pure {\\n        if (!_maxValueSet || !_priceSet) revert RequiredValuesNotSet(_stage, _maxValueSet, _priceSet);\\n        uint64 totalWhitelist = _whitelistTotalMinted + _quantity;\\n        uint64 mintTotal = _userMintTotal + _quantity;\\n        uint64 whitelistTotal = _userWhitelistTotal + _quantity;\\n        if (totalWhitelist > _whitelistMaxSupply) revert ExceedsMaxSupply(_stage, totalWhitelist, _whitelistMaxSupply);\\n        if (whitelistTotal > _capPerWallet) revert ExceedsCapPerWallet(_stage, mintTotal, _capPerWallet);\\n    }\\n}\\n\",\"keccak256\":\"0x79df22b1442d9827eb3e126e2e20f258afb82b69ddba421c4f4c015aed7941fe\",\"license\":\"Apache-2.0\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ce51ff43bf1d6690341475ef3caf0929c43c63258fe56dc7fc301608ea9f30d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526016805461ff00191690553480156200001c57600080fd5b5060405162003d4b38038062003d4b8339810160408190526200003f9162000456565b808382878781600290805190602001906200005c929190620002f9565b50805162000072906003906020840190620002f9565b506000808155600f80546001600160a01b0319166001600160a01b038616179055620000a29250905080620001fa565b620000be60008051602062003d0b8339815191526000620001fa565b600f54620000d8906000906001600160a01b031662000245565b600f54620001009060008051602062003d0b833981519152906001600160a01b031662000245565b6200011b60008051602062003d0b8339815191523362000245565b506015819055801562000136576016805460ff191660011790555b601080546001600160a01b0319166001600160a01b0384161790556200015e600080620001fa565b6200017a60008051602062003d2b8339815191526000620001fa565b60105462000194906000906001600160a01b031662000245565b601054620001bc9060008051602062003d2b833981519152906001600160a01b031662000245565b620001d760008051602062003d2b8339815191523362000245565b50508151620001ee906019906020850190620002f9565b50505050505062000568565b600082815260086020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62000251828262000255565b5050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16620002515760008281526008602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002b53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620003079062000515565b90600052602060002090601f0160209004810192826200032b576000855562000376565b82601f106200034657805160ff191683800117855562000376565b8280016001018555821562000376579182015b828111156200037657825182559160200191906001019062000359565b506200038492915062000388565b5090565b5b8082111562000384576000815560010162000389565b600082601f830112620003b157600080fd5b81516001600160401b0380821115620003ce57620003ce62000552565b604051601f8301601f19908116603f01168101908282118183101715620003f957620003f962000552565b816040528381526020925086838588010111156200041657600080fd5b600091505b838210156200043a57858201830151818301840152908201906200041b565b838211156200044c5760008385830101525b9695505050505050565b600080600080600060a086880312156200046f57600080fd5b85516001600160401b03808211156200048757600080fd5b6200049589838a016200039f565b96506020880151915080821115620004ac57600080fd5b620004ba89838a016200039f565b9550604088015194506060880151915080821115620004d857600080fd5b50620004e7888289016200039f565b608088015190935090506001600160a01b03811681146200050757600080fd5b809150509295509295909350565b600181811c908216806200052a57607f821691505b602082108114156200054c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61379380620005786000396000f3fe6080604052600436106102535760003560e01c806301ffc9a71461029857806306fdde03146102cd578063081812fc146102ef578063095ea7b31461032757806309b091651461034957806318160ddd1461037d5780631cc1d831146103a057806323b872dd146103c0578063248a9ca3146103e05780632a55205a146104005780632f2ff15d1461042e57806335ec99851461044e57806336568abe1461046e5780633ccfd60b1461048e57806341b69a3c146104a357806342842e0e146104ca57806356b855aa146104ea57806358f462851461050c5780635c311bd3146105335780636352211e146105485780636817c76c146105685780636c0360eb1461057e57806370a08231146105935780637c4eb82d146105b357806381e1ced3146105d35780638a20ef70146105e657806391d148541461060657806395d89b4114610626578063a217fddf1461063b578063a22cb46514610650578063a48cbb0414610670578063aea4d2bd14610690578063b039e49e146106b0578063b2afbdbb146106d2578063b88d4fde146106f2578063bc9571b614610712578063bda4489014610739578063bf8bcee414610759578063c040e6b814610779578063c21b471b146107a5578063c87b56dd146107c5578063cab3cd97146107e5578063ce3cd99714610805578063ce4c1d5914610825578063d0c6fc8414610838578063d547741f1461085f578063e80554501461087f578063e985e9c51461089f578063f4a0a528146108e8578063f58f318b14610908578063fc1a1c3614610928578063fd6b9c351461093e57600080fd5b36610293577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f8852587433346040516102899291906133ad565b60405180910390a1005b600080fd5b3480156102a457600080fd5b506102b86102b336600461307c565b610969565b60405190151581526020015b60405180910390f35b3480156102d957600080fd5b506102e261097a565b6040516102c491906134db565b3480156102fb57600080fd5b5061030f61030a366004613040565b610a0c565b6040516001600160a01b0390911681526020016102c4565b34801561033357600080fd5b50610347610342366004612fde565b610a50565b005b34801561035557600080fd5b50600a5461037090600160581b90046001600160401b031681565b6040516102c491906134ee565b34801561038957600080fd5b50600154600054035b6040519081526020016102c4565b3480156103ac57600080fd5b506103476103bb366004613040565b610ade565b3480156103cc57600080fd5b506103476103db366004612e8b565b610b4f565b3480156103ec57600080fd5b506103926103fb366004613040565b610b5a565b34801561040c57600080fd5b5061042061041b366004613148565b610b6f565b6040516102c49291906133ad565b34801561043a57600080fd5b50610347610449366004613059565b610c1b565b34801561045a57600080fd5b5061034761046936600461320a565b610c38565b34801561047a57600080fd5b50610347610489366004613059565b610d31565b34801561049a57600080fd5b50610347610db4565b3480156104af57600080fd5b5060125461037090600160801b90046001600160401b031681565b3480156104d657600080fd5b506103476104e5366004612e8b565b610eda565b3480156104f657600080fd5b5061039260008051602061371e83398151915281565b34801561051857600080fd5b50600b5461037090600160c01b90046001600160401b031681565b34801561053f57600080fd5b50610347610ef5565b34801561055457600080fd5b5061030f610563366004613040565b610f36565b34801561057457600080fd5b5061039260115481565b34801561058a57600080fd5b506102e2610f48565b34801561059f57600080fd5b506103926105ae366004612e3d565b610fd6565b3480156105bf57600080fd5b506103476105ce366004613234565b611024565b6103476105e1366004613185565b611096565b3480156105f257600080fd5b5061034761060136600461316a565b61145d565b34801561061257600080fd5b506102b8610621366004613059565b611517565b34801561063257600080fd5b506102e2611542565b34801561064757600080fd5b50610392600081565b34801561065c57600080fd5b5061034761066b366004612fa2565b611551565b34801561067c57600080fd5b50600c54610370906001600160401b031681565b34801561069c57600080fd5b50600b54610370906001600160401b031681565b3480156106bc57600080fd5b506103926000805160206136fe83398151915281565b3480156106de57600080fd5b506103476106ed3660046130d7565b6115e7565b3480156106fe57600080fd5b5061034761070d366004612ec7565b611628565b34801561071e57600080fd5b5060125461037090600160c01b90046001600160401b031681565b34801561074557600080fd5b50610347610754366004613040565b61167e565b34801561076557600080fd5b50610347610774366004613040565b611715565b34801561078557600080fd5b5060165461079890610100900460ff1681565b6040516102c491906133c6565b3480156107b157600080fd5b506103476107c0366004613008565b6117ae565b3480156107d157600080fd5b506102e26107e0366004613040565b6117ed565b3480156107f157600080fd5b50601254610370906001600160401b031681565b34801561081157600080fd5b506103476108203660046130b6565b6118b8565b61034761083336600461316a565b611916565b34801561084457600080fd5b50600a5461037090600160981b90046001600160401b031681565b34801561086b57600080fd5b5061034761087a366004613059565b611b31565b34801561088b57600080fd5b5061034761089a366004613040565b611b4e565b3480156108ab57600080fd5b506102b86108ba366004612e58565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156108f457600080fd5b50610347610903366004613040565b611bb8565b34801561091457600080fd5b50610347610923366004613234565b611c4f565b34801561093457600080fd5b5061039260095481565b34801561094a57600080fd5b50600a5461037090630100000090046001600160401b031681565b3390565b600061097482611dbc565b92915050565b6060600280546109899061360f565b80601f01602080910402602001604051908101604052809291908181526020018280546109b59061360f565b8015610a025780601f106109d757610100808354040283529160200191610a02565b820191906000526020600020905b8154815290600101906020018083116109e557829003601f168201915b5050505050905090565b6000610a1782611de1565b610a34576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610a5b82610f36565b9050806001600160a01b0316836001600160a01b03161415610a905760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610ab05750610aae81336108ba565b155b15610ace576040516367d9dca160e11b815260040160405180910390fd5b610ad9838383611e0c565b505050565b610af66000805160206136fe83398151915233611517565b610b1357604051634cd5cb6360e01b815260040160405180910390fd5b600e8190556040518181527f4655e3cf9f744dfa4417c12524e0e9cb828996557874f5214b00e22f2e6f6fff906020015b60405180910390a150565b610ad9838383611e68565b60009081526008602052604090206001015490565b60008281526018602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610be45750604080518082019091526017546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610c03906001600160601b031687613596565b610c0d9190613582565b915196919550909350505050565b610c2482610b5a565b610c2e8133612043565b610ad983836120a7565b610c5060008051602061371e83398151915233611517565b610c6d57604051634cd5cb6360e01b815260040160405180910390fd5b6001600160401b0382161580610c8a57506001600160401b038116155b15610ca85760405163180eaa0360e21b815260040160405180910390fd5b601280546001600160401b03838116600160c01b026001600160c01b03918616600160801b02919091166001600160801b03909216919091171790556013805461ff0019166101001790556040517f49fe9c127bb06a886739f67037bbf90debdcad1b038c4660b9af8a0baf83621e90610d259084908490613502565b60405180910390a15050565b6001600160a01b0381163314610da65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610db0828261212d565b5050565b610dcc60008051602061371e83398151915233611517565b610de957604051634cd5cb6360e01b815260040160405180910390fd5b4780610e375760405162461bcd60e51b815260206004820152601e60248201527f4552433732313a204e6f2062616c616e636520746f20776974686472617700006044820152606401610d9d565b604051600090339083908381818185875af1925050503d8060008114610e79576040519150601f19603f3d011682016040523d82523d6000602084013e610e7e565b606091505b5050905080610db05760405162461bcd60e51b815260206004820152602260248201527f4552433732313a204661696c656420746f207769746864726177207061796d656044820152611b9d60f21b6064820152608401610d9d565b610ad983838360405180602001604052806000815250611628565b610f0d60008051602061371e83398151915233611517565b610f2a57604051634cd5cb6360e01b815260040160405180910390fd5b610f346000601755565b565b6000610f4182612194565b5192915050565b60198054610f559061360f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f819061360f565b8015610fce5780601f10610fa357610100808354040283529160200191610fce565b820191906000526020600020905b815481529060010190602001808311610fb157829003601f168201915b505050505081565b60006001600160a01b038216610fff576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b61103c60008051602061371e83398151915233611517565b61105957604051634cd5cb6360e01b815260040160405180910390fd5b601554816001600160401b0316111561108b5760155460405163494898b360e01b8152600401610d9d91815260200190565b610ad98383836122ae565b6010546001600160a01b0316336001600160a01b031614610ad95760165460ff166110d45760405163c307d70360e01b815260040160405180910390fd5b60135462010000900460ff166110fd57604051632865aae160e11b815260040160405180910390fd5b730319A03A52cFB5eEFB6dB8B7CDF2D10C8e24Dfde63b1c6bab3601660019054906101000a900460ff1685600a60139054906101000a90046001600160401b031660155461114a60005490565b336000908152601460205260409081902054601254915160e089901b6001600160e01b03191681526111a89796959493926001600160401b03600160801b840481169381811693600160401b9091048216929091169060040161342e565b60006040518083038186803b1580156111c057600080fd5b505af41580156111d4573d6000803e3d6000fd5b50600192506111e1915050565b601654610100900460ff1660038111156111fd576111fd6136a5565b14156112fa57601654336000908152601460205260409081902054600b54600a54600c549351630592d97360e51b8152730319A03A52cFB5eEFB6dB8B7CDF2D10C8e24Dfde9563b25b2e60956112979561010090920460ff1694600160401b83046001600160401b0390811695600160801b94859004821695949092048116938d93600160581b909304821692919091169060040161348d565b60006040518083038186803b1580156112af57600080fd5b505af41580156112c3573d6000803e3d6000fd5b505050506112d48282600e546123da565b6112de3384612477565b6112e7836124da565b610ad933846001600160401b0316612525565b6002601654610100900460ff166003811115611318576113186136a5565b141561144457601654600a54730319A03A52cFB5eEFB6dB8B7CDF2D10C8e24Dfde91638c45d1b39160ff610100928390048116928204811691166014600061135d3390565b6001600160a01b031681526020808201929092526040908101600090812054338252601490935281902054600b54600a54925160e089901b6001600160e01b03191681526113e7979695946001600160401b03908116948e94600160401b90819004831694908104831693600160c01b9091048316926301000000909204909116906004016133d4565b60006040518083038186803b1580156113ff57600080fd5b505af4158015611413573d6000803e3d6000fd5b50505050611424346009548561253f565b6114318282600d546123da565b61143b3384612580565b6112e7836125b1565b60405163e82a532960e01b815260040160405180910390fd5b61147560008051602061371e83398151915233611517565b61149257604051634cd5cb6360e01b815260040160405180910390fd5b6001600160401b0381166114b95760405163180eaa0360e21b815260040160405180910390fd5b601280546001600160401b0383166001600160401b03199091161790556013805462ff00001916620100001790556040517f08ade71bd2fcc23d339aba89c0b11b5eabeefdb36e78c9a26d7282af8aa9a18b90610b449083906134ee565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600380546109899061360f565b6001600160a01b03821633141561157b5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6115ff60008051602061371e83398151915233611517565b61161c57604051634cd5cb6360e01b815260040160405180910390fd5b610ad960198383612d71565b611633848484611e68565b611645836001600160a01b03166125d5565b801561165a5750611658848484846125e4565b155b15611678576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6116966000805160206136fe83398151915233611517565b6116b357604051634cd5cb6360e01b815260040160405180910390fd5b806116d1576040516310684fcd60e01b815260040160405180910390fd5b6009819055600a805460ff191660011790556040517f1188b648aa54a28bd493b99c519d3d910b2dbf32ea8da41ef17b543febea584d90610b449083815260200190565b61172d60008051602061371e83398151915233611517565b61174a57604051634cd5cb6360e01b815260040160405180910390fd5b60155461176a5760405163180eaa0360e21b815260040160405180910390fd5b60158190556016805460ff191660011790556040517fcabee725acd8cab3b4832613e856e683eeb2a36ac82d3f487477eadf47dcfe7090610b449083815260200190565b6117c660008051602061371e83398151915233611517565b6117e357604051634cd5cb6360e01b815260040160405180910390fd5b610db082826126dc565b60606117f882611de1565b61185c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610d9d565b60006118666127d5565b9050600081511161188657604051806020016040528060008152506118b1565b80611890846127e4565b6040516020016118a19291906132c5565b6040516020818303038152906040525b9392505050565b6118d060008051602061371e83398151915233611517565b6118ed57604051634cd5cb6360e01b815260040160405180910390fd5b6016805482919061ff00191661010083600381111561190e5761190e6136a5565b021790555050565b6010546001600160a01b0316336001600160a01b031614611a185760165460ff166119545760405163c307d70360e01b815260040160405180910390fd5b60135462010000900460ff1661197d57604051632865aae160e11b815260040160405180910390fd5b6000601654610100900460ff16600381111561199b5761199b6136a5565b1480156119bb57506010546001600160a01b0316336001600160a01b0316145b15611a1b57601554816001600160401b03166119d660005490565b6119e0919061353f565b1115611a055760155460405163494898b360e01b8152600401610d9d91815260200190565b611a1833826001600160401b0316612525565b50565b6003601654610100900460ff166003811115611a3957611a396136a5565b141561144457730319A03A52cFB5eEFB6dB8B7CDF2D10C8e24Dfde63b1c6bab3601660019054906101000a900460ff1683600a60139054906101000a90046001600160401b0316601554611a8c60005490565b336000908152601460205260409081902054601254915160e089901b6001600160e01b0319168152611aea9796959493926001600160401b03600160801b840481169381811693600160401b9091048216929091169060040161342e565b60006040518083038186803b158015611b0257600080fd5b505af4158015611b16573d6000803e3d6000fd5b50505050611b27346011548361253f565b611a0533826128e1565b611b3a82610b5a565b611b448133612043565b610ad9838361212d565b611b666000805160206136fe83398151915233611517565b611b8357604051634cd5cb6360e01b815260040160405180910390fd5b600d8190556040518181527f99929ef67c514ea9620ed76a815e171666e76bba7e4865b91fdad2ebc5a5622890602001610b44565b611bd060008051602061371e83398151915233611517565b611bed57604051634cd5cb6360e01b815260040160405180910390fd5b80611c0b5760405163180eaa0360e21b815260040160405180910390fd5b60118190556013805460ff191660011790556040517feed7c62175a21793fed39b36714aed8a093899bc4dd6949d915e188374059f8990610b449083815260200190565b611c676000805160206136fe83398151915233611517565b611c8457604051634cd5cb6360e01b815260040160405180910390fd5b6001600160401b0383161580611ca157506001600160401b038216155b80611cb357506001600160401b038116155b15611cd1576040516310684fcd60e01b815260040160405180910390fd5b600b546001600160401b03600160c01b90910481169082161115611d1e57600b54604051630f5ee50360e31b8152610d9d91600160c01b90046001600160401b0316908390600401613502565b600a8054600b80546001600160401b038681166001600160401b031992831617909255600c8054868416921691909117905562ff000019908616600160581b021662ff0000600160581b03600160981b031990911617620100001790556040517f2e18910b93507ab75f5db66649e2b89f9f4ce4444964cb1c417b323d0901004d90611daf9085908590859061351c565b60405180910390a1505050565b60006001600160e01b0319821663152a902d60e11b148061097457506109748261291c565b6000805482108015610974575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611e7382612194565b9050836001600160a01b031681600001516001600160a01b031614611eaa5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b0386161480611ec85750611ec885336108ba565b80611ee3575033611ed884610a0c565b6001600160a01b0316145b905080611f0357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038416611f2a57604051633a954ecd60e21b815260040160405180910390fd5b611f3660008487611e0c565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661200957600054821461200957805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061373e83398151915260405160405180910390a45b5050505050565b61204d8282611517565b610db057612065816001600160a01b03166014612941565b612070836020612941565b604051602001612081929190613301565b60408051601f198184030181529082905262461bcd60e51b8252610d9d916004016134db565b6120b18282611517565b610db05760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556120e93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121378282611517565b15610db05760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60408051606081018252600080825260208201819052918101919091528160005481101561229557600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906122935780516001600160a01b03161561222a579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561228e579392505050565b61222a565b505b604051636f96cda160e11b815260040160405180910390fd5b6122c66000805160206136fe83398151915233611517565b6122e357604051634cd5cb6360e01b815260040160405180910390fd5b6001600160401b038316158061230057506001600160401b038216155b8061231257506001600160401b038116155b15612330576040516310684fcd60e01b815260040160405180910390fd5b600a8054600b80546001600160c01b0316600160c01b6001600160401b0386811691909102919091179091556101006301000000600160581b03600160981b03600160d81b0319909216630100000087831602600160981b600160d81b03191617600160981b918616919091021761ff0019161790556040517fe24df9eedbb3f6ed9adb49aee3e443f43f499a961f73439786ff67e5e95cb22090611daf9083908590829061351c565b61245a83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525085925061241c91506109659050565b60405160200161243f919060609190911b6001600160601b031916815260140190565b60405160208183030381529060405280519060200120612adc565b610ad95760405163582f497d60e11b815260040160405180910390fd5b6001600160a01b038216600090815260146020526040902080548291906010906124b2908490600160801b90046001600160401b0316613557565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505050565b80600b60108282829054906101000a90046001600160401b03166124fe9190613557565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555050565b610db0828260405180602001604052806000815250612ae9565b60006125546001600160401b03831684613596565b90508084146116785760405163b99e2ab760e01b81526004810185905260248101829052604401610d9d565b6001600160a01b038216600090815260146020526040812080548392906124b29084906001600160401b0316613557565b80600b60088282829054906101000a90046001600160401b03166124fe9190613557565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612619903390899088908890600401613370565b602060405180830381600087803b15801561263357600080fd5b505af1925050508015612663575060408051601f3d908101601f1916820190925261266091810190613099565b60015b6126be573d808015612691576040519150601f19603f3d011682016040523d82523d6000602084013e612696565b606091505b5080516126b6576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6127106001600160601b038216111561274a5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610d9d565b6001600160a01b03821661279c5760405162461bcd60e51b815260206004820152601960248201527822a921991c9c189d1034b73b30b634b2103932b1b2b4bb32b960391b6044820152606401610d9d565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217601755565b6060601980546109899061360f565b6060816128085750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612832578061281c8161364a565b915061282b9050600a83613582565b915061280c565b6000816001600160401b0381111561284c5761284c6136d1565b6040519080825280601f01601f191660200182016040528015612876576020820181803683370190505b5090505b84156126d45761288b6001836135b5565b9150612898600a86613665565b6128a390603061353f565b60f81b8183815181106128b8576128b86136bb565b60200101906001600160f81b031916908160001a9053506128da600a86613582565b945061287a565b6001600160a01b038216600090815260146020526040902080548291906008906124b2908490600160401b90046001600160401b0316613557565b60006001600160e01b03198216637965db0b60e01b1480610974575061097482612af6565b60606000612950836002613596565b61295b90600261353f565b6001600160401b03811115612972576129726136d1565b6040519080825280601f01601f19166020018201604052801561299c576020820181803683370190505b509050600360fc1b816000815181106129b7576129b76136bb565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106129e6576129e66136bb565b60200101906001600160f81b031916908160001a9053506000612a0a846002613596565b612a1590600161353f565b90505b6001811115612a8d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a4957612a496136bb565b1a60f81b828281518110612a5f57612a5f6136bb565b60200101906001600160f81b031916908160001a90535060049490941c93612a86816135f8565b9050612a18565b5083156118b15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d9d565b60006126d4848484612b46565b610ad98383836001612b5c565b60006001600160e01b031982166380ac58cd60e01b1480612b2757506001600160e01b03198216635b5e139f60e01b145b8061097457506301ffc9a760e01b6001600160e01b0319831614610974565b600082612b538584612cfd565b14949350505050565b6000546001600160a01b038516612b8557604051622e076360e81b815260040160405180910390fd5b83612ba35760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160401b038083168c018116918217600160401b6001600160401b031990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b429092169190910217905580808501838015612c495750612c49876001600160a01b03166125d5565b15612cc0575b60405182906001600160a01b0389169060009060008051602061373e833981519152908290a4612c8860008884806001019550886125e4565b612ca5576040516368d2bf6b60e11b815260040160405180910390fd5b80821415612c4f578260005414612cbb57600080fd5b612cf4565b5b6040516001830192906001600160a01b0389169060009060008051602061373e833981519152908290a480821415612cc1575b5060005561203c565b600081815b8451811015612d69576000858281518110612d1f57612d1f6136bb565b60200260200101519050808311612d455760008381526020829052604090209250612d56565b600081815260208490526040902092505b5080612d618161364a565b915050612d02565b509392505050565b828054612d7d9061360f565b90600052602060002090601f016020900481019282612d9f5760008555612de5565b82601f10612db85782800160ff19823516178555612de5565b82800160010185558215612de5579182015b82811115612de5578235825591602001919060010190612dca565b50612df1929150612df5565b5090565b5b80821115612df15760008155600101612df6565b80356001600160a01b0381168114612e2157600080fd5b919050565b80356001600160401b0381168114612e2157600080fd5b600060208284031215612e4f57600080fd5b6118b182612e0a565b60008060408385031215612e6b57600080fd5b612e7483612e0a565b9150612e8260208401612e0a565b90509250929050565b600080600060608486031215612ea057600080fd5b612ea984612e0a565b9250612eb760208501612e0a565b9150604084013590509250925092565b60008060008060808587031215612edd57600080fd5b612ee685612e0a565b9350612ef460208601612e0a565b92506040850135915060608501356001600160401b0380821115612f1757600080fd5b818701915087601f830112612f2b57600080fd5b813581811115612f3d57612f3d6136d1565b604051601f8201601f19908116603f01168101908382118183101715612f6557612f656136d1565b816040528281528a6020848701011115612f7e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612fb557600080fd5b612fbe83612e0a565b915060208301358015158114612fd357600080fd5b809150509250929050565b60008060408385031215612ff157600080fd5b612ffa83612e0a565b946020939093013593505050565b6000806040838503121561301b57600080fd5b61302483612e0a565b915060208301356001600160601b0381168114612fd357600080fd5b60006020828403121561305257600080fd5b5035919050565b6000806040838503121561306c57600080fd5b82359150612e8260208401612e0a565b60006020828403121561308e57600080fd5b81356118b1816136e7565b6000602082840312156130ab57600080fd5b81516118b1816136e7565b6000602082840312156130c857600080fd5b8135600481106118b157600080fd5b600080602083850312156130ea57600080fd5b82356001600160401b038082111561310157600080fd5b818501915085601f83011261311557600080fd5b81358181111561312457600080fd5b86602082850101111561313657600080fd5b60209290920196919550909350505050565b6000806040838503121561315b57600080fd5b50508035926020909101359150565b60006020828403121561317c57600080fd5b6118b182612e26565b60008060006040848603121561319a57600080fd5b6131a384612e26565b925060208401356001600160401b03808211156131bf57600080fd5b818601915086601f8301126131d357600080fd5b8135818111156131e257600080fd5b8760208260051b85010111156131f757600080fd5b6020830194508093505050509250925092565b6000806040838503121561321d57600080fd5b61322683612e26565b9150612e8260208401612e26565b60008060006060848603121561324957600080fd5b61325284612e26565b925061326060208501612e26565b915061326e60408501612e26565b90509250925092565b6000815180845261328f8160208601602086016135cc565b601f01601f19169290920160200192915050565b600481106132c157634e487b7160e01b600052602160045260246000fd5b9052565b600083516132d78184602088016135cc565b602f60f81b90830190815283516132f58160018401602088016135cc565b01600101949350505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516133338160178501602088016135cc565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133648160288401602088016135cc565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133a390830184613277565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6020810161097482846132a3565b61012081016133e3828c6132a3565b981515602082015296151560408801526001600160401b039586166060880152938516608087015291841660a0860152831660c0850152821660e08401521661010090910152919050565b610120810161343d828c6132a3565b6001600160401b03998a16602083015297891660408201526060810196909652608086019490945291861660a0850152851660c0840152841660e083015290921661010090920191909152919050565b60e0810161349b828a6132a3565b6001600160401b039788166020830152958716604082015293861660608501529185166080840152841660a083015290921660c090920191909152919050565b6020815260006118b16020830184613277565b6001600160401b0391909116815260200190565b6001600160401b0392831681529116602082015260400190565b6001600160401b0393841681529183166020830152909116604082015260600190565b6000821982111561355257613552613679565b500190565b60006001600160401b0382811684821680830382111561357957613579613679565b01949350505050565b6000826135915761359161368f565b500490565b60008160001904831182151516156135b0576135b0613679565b500290565b6000828210156135c7576135c7613679565b500390565b60005b838110156135e75781810151838201526020016135cf565b838111156116785750506000910152565b60008161360757613607613679565b506000190190565b600181811c9082168061362357607f821691505b6020821081141561364457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561365e5761365e613679565b5060010190565b6000826136745761367461368f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611a1857600080fdfe15a6d0bb3aa80eeb8af9e60b6fcf74e11d27ec8b6e2b1a0b22e29d447fac5d967def632d64a7259044c921303d544f945a340c8d4334adc0e0bd830a54deb528ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bd4bfbcd1e4d40da1a96485077f01d0535375d706d054d8d9b7663e5d157d7bd64736f6c6343000807003315a6d0bb3aa80eeb8af9e60b6fcf74e11d27ec8b6e2b1a0b22e29d447fac5d967def632d64a7259044c921303d544f945a340c8d4334adc0e0bd830a54deb528",
  "deployedBytecode": "$434d3452d461c36209acc9b6e3d1823548$__63b1c6bab3601660019054906101000a900460ff1685600a60139054906101000a90046001600160401b031660155461114a60005490565b336000908152601460205260409081902054601254915160e089901b6001600160e01b03191681526111a89796959493926001600160401b03600160801b840481169381811693600160401b9091048216929091169060040161342e565b60006040518083038186803b1580156111c057600080fd5b505af41580156111d4573d6000803e3d6000fd5b50600192506111e1915050565b601654610100900460ff1660038111156111fd576111fd6136a5565b14156112fa57601654336000908152601460205260409081902054600b54600a54600c549351630592d97360e51b815273__$434d3452d461c36209acc9b6e3d1823548$__9563b25b2e60956112979561010090920460ff1694600160401b83046001600160401b0390811695600160801b94859004821695949092048116938d93600160581b909304821692919091169060040161348d565b60006040518083038186803b1580156112af57600080fd5b505af41580156112c3573d6000803e3d6000fd5b505050506112d48282600e546123da565b6112de3384612477565b6112e7836124da565b610ad933846001600160401b0316612525565b6002601654610100900460ff166003811115611318576113186136a5565b141561144457601654600a5473__$434d3452d461c36209acc9b6e3d1823548$__91638c45d1b39160ff610100928390048116928204811691166014600061135d3390565b6001600160a01b031681526020808201929092526040908101600090812054338252601490935281902054600b54600a54925160e089901b6001600160e01b03191681526113e7979695946001600160401b03908116948e94600160401b90819004831694908104831693600160c01b9091048316926301000000909204909116906004016133d4565b60006040518083038186803b1580156113ff57600080fd5b505af4158015611413573d6000803e3d6000fd5b50505050611424346009548561253f565b6114318282600d546123da565b61143b3384612580565b6112e7836125b1565b60405163e82a532960e01b815260040160405180910390fd5b61147560008051602061371e83398151915233611517565b61149257604051634cd5cb6360e01b815260040160405180910390fd5b6001600160401b0381166114b95760405163180eaa0360e21b815260040160405180910390fd5b601280546001600160401b0383166001600160401b03199091161790556013805462ff00001916620100001790556040517f08ade71bd2fcc23d339aba89c0b11b5eabeefdb36e78c9a26d7282af8aa9a18b90610b449083906134ee565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600380546109899061360f565b6001600160a01b03821633141561157b5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6115ff60008051602061371e83398151915233611517565b61161c57604051634cd5cb6360e01b815260040160405180910390fd5b610ad960198383612d71565b611633848484611e68565b611645836001600160a01b03166125d5565b801561165a5750611658848484846125e4565b155b15611678576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6116966000805160206136fe83398151915233611517565b6116b357604051634cd5cb6360e01b815260040160405180910390fd5b806116d1576040516310684fcd60e01b815260040160405180910390fd5b6009819055600a805460ff191660011790556040517f1188b648aa54a28bd493b99c519d3d910b2dbf32ea8da41ef17b543febea584d90610b449083815260200190565b61172d60008051602061371e83398151915233611517565b61174a57604051634cd5cb6360e01b815260040160405180910390fd5b60155461176a5760405163180eaa0360e21b815260040160405180910390fd5b60158190556016805460ff191660011790556040517fcabee725acd8cab3b4832613e856e683eeb2a36ac82d3f487477eadf47dcfe7090610b449083815260200190565b6117c660008051602061371e83398151915233611517565b6117e357604051634cd5cb6360e01b815260040160405180910390fd5b610db082826126dc565b60606117f882611de1565b61185c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610d9d565b60006118666127d5565b9050600081511161188657604051806020016040528060008152506118b1565b80611890846127e4565b6040516020016118a19291906132c5565b6040516020818303038152906040525b9392505050565b6118d060008051602061371e83398151915233611517565b6118ed57604051634cd5cb6360e01b815260040160405180910390fd5b6016805482919061ff00191661010083600381111561190e5761190e6136a5565b021790555050565b6010546001600160a01b0316336001600160a01b031614611a185760165460ff166119545760405163c307d70360e01b815260040160405180910390fd5b60135462010000900460ff1661197d57604051632865aae160e11b815260040160405180910390fd5b6000601654610100900460ff16600381111561199b5761199b6136a5565b1480156119bb57506010546001600160a01b0316336001600160a01b0316145b15611a1b57601554816001600160401b03166119d660005490565b6119e0919061353f565b1115611a055760155460405163494898b360e01b8152600401610d9d91815260200190565b611a1833826001600160401b0316612525565b50565b6003601654610100900460ff166003811115611a3957611a396136a5565b14156114445773__$434d3452d461c36209acc9b6e3d1823548$__63b1c6bab3601660019054906101000a900460ff1683600a60139054906101000a90046001600160401b0316601554611a8c60005490565b336000908152601460205260409081902054601254915160e089901b6001600160e01b0319168152611aea9796959493926001600160401b03600160801b840481169381811693600160401b9091048216929091169060040161342e565b60006040518083038186803b158015611b0257600080fd5b505af4158015611b16573d6000803e3d6000fd5b50505050611b27346011548361253f565b611a0533826128e1565b611b3a82610b5a565b611b448133612043565b610ad9838361212d565b611b666000805160206136fe83398151915233611517565b611b8357604051634cd5cb6360e01b815260040160405180910390fd5b600d8190556040518181527f99929ef67c514ea9620ed76a815e171666e76bba7e4865b91fdad2ebc5a5622890602001610b44565b611bd060008051602061371e83398151915233611517565b611bed57604051634cd5cb6360e01b815260040160405180910390fd5b80611c0b5760405163180eaa0360e21b815260040160405180910390fd5b60118190556013805460ff191660011790556040517feed7c62175a21793fed39b36714aed8a093899bc4dd6949d915e188374059f8990610b449083815260200190565b611c676000805160206136fe83398151915233611517565b611c8457604051634cd5cb6360e01b815260040160405180910390fd5b6001600160401b0383161580611ca157506001600160401b038216155b80611cb357506001600160401b038116155b15611cd1576040516310684fcd60e01b815260040160405180910390fd5b600b546001600160401b03600160c01b90910481169082161115611d1e57600b54604051630f5ee50360e31b8152610d9d91600160c01b90046001600160401b0316908390600401613502565b600a8054600b80546001600160401b038681166001600160401b031992831617909255600c8054868416921691909117905562ff000019908616600160581b021662ff0000600160581b03600160981b031990911617620100001790556040517f2e18910b93507ab75f5db66649e2b89f9f4ce4444964cb1c417b323d0901004d90611daf9085908590859061351c565b60405180910390a1505050565b60006001600160e01b0319821663152a902d60e11b148061097457506109748261291c565b6000805482108015610974575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611e7382612194565b9050836001600160a01b031681600001516001600160a01b031614611eaa5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b0386161480611ec85750611ec885336108ba565b80611ee3575033611ed884610a0c565b6001600160a01b0316145b905080611f0357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038416611f2a57604051633a954ecd60e21b815260040160405180910390fd5b611f3660008487611e0c565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661200957600054821461200957805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061373e83398151915260405160405180910390a45b5050505050565b61204d8282611517565b610db057612065816001600160a01b03166014612941565b612070836020612941565b604051602001612081929190613301565b60408051601f198184030181529082905262461bcd60e51b8252610d9d916004016134db565b6120b18282611517565b610db05760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556120e93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121378282611517565b15610db05760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60408051606081018252600080825260208201819052918101919091528160005481101561229557600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906122935780516001600160a01b03161561222a579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561228e579392505050565b61222a565b505b604051636f96cda160e11b815260040160405180910390fd5b6122c66000805160206136fe83398151915233611517565b6122e357604051634cd5cb6360e01b815260040160405180910390fd5b6001600160401b038316158061230057506001600160401b038216155b8061231257506001600160401b038116155b15612330576040516310684fcd60e01b815260040160405180910390fd5b600a8054600b80546001600160c01b0316600160c01b6001600160401b0386811691909102919091179091556101006301000000600160581b03600160981b03600160d81b0319909216630100000087831602600160981b600160d81b03191617600160981b918616919091021761ff0019161790556040517fe24df9eedbb3f6ed9adb49aee3e443f43f499a961f73439786ff67e5e95cb22090611daf9083908590829061351c565b61245a83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525085925061241c91506109659050565b60405160200161243f919060609190911b6001600160601b031916815260140190565b60405160208183030381529060405280519060200120612adc565b610ad95760405163582f497d60e11b815260040160405180910390fd5b6001600160a01b038216600090815260146020526040902080548291906010906124b2908490600160801b90046001600160401b0316613557565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505050565b80600b60108282829054906101000a90046001600160401b03166124fe9190613557565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555050565b610db0828260405180602001604052806000815250612ae9565b60006125546001600160401b03831684613596565b90508084146116785760405163b99e2ab760e01b81526004810185905260248101829052604401610d9d565b6001600160a01b038216600090815260146020526040812080548392906124b29084906001600160401b0316613557565b80600b60088282829054906101000a90046001600160401b03166124fe9190613557565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612619903390899088908890600401613370565b602060405180830381600087803b15801561263357600080fd5b505af1925050508015612663575060408051601f3d908101601f1916820190925261266091810190613099565b60015b6126be573d808015612691576040519150601f19603f3d011682016040523d82523d6000602084013e612696565b606091505b5080516126b6576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6127106001600160601b038216111561274a5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610d9d565b6001600160a01b03821661279c5760405162461bcd60e51b815260206004820152601960248201527822a921991c9c189d1034b73b30b634b2103932b1b2b4bb32b960391b6044820152606401610d9d565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217601755565b6060601980546109899061360f565b6060816128085750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612832578061281c8161364a565b915061282b9050600a83613582565b915061280c565b6000816001600160401b0381111561284c5761284c6136d1565b6040519080825280601f01601f191660200182016040528015612876576020820181803683370190505b5090505b84156126d45761288b6001836135b5565b9150612898600a86613665565b6128a390603061353f565b60f81b8183815181106128b8576128b86136bb565b60200101906001600160f81b031916908160001a9053506128da600a86613582565b945061287a565b6001600160a01b038216600090815260146020526040902080548291906008906124b2908490600160401b90046001600160401b0316613557565b60006001600160e01b03198216637965db0b60e01b1480610974575061097482612af6565b60606000612950836002613596565b61295b90600261353f565b6001600160401b03811115612972576129726136d1565b6040519080825280601f01601f19166020018201604052801561299c576020820181803683370190505b509050600360fc1b816000815181106129b7576129b76136bb565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106129e6576129e66136bb565b60200101906001600160f81b031916908160001a9053506000612a0a846002613596565b612a1590600161353f565b90505b6001811115612a8d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a4957612a496136bb565b1a60f81b828281518110612a5f57612a5f6136bb565b60200101906001600160f81b031916908160001a90535060049490941c93612a86816135f8565b9050612a18565b5083156118b15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d9d565b60006126d4848484612b46565b610ad98383836001612b5c565b60006001600160e01b031982166380ac58cd60e01b1480612b2757506001600160e01b03198216635b5e139f60e01b145b8061097457506301ffc9a760e01b6001600160e01b0319831614610974565b600082612b538584612cfd565b14949350505050565b6000546001600160a01b038516612b8557604051622e076360e81b815260040160405180910390fd5b83612ba35760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160401b038083168c018116918217600160401b6001600160401b031990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b429092169190910217905580808501838015612c495750612c49876001600160a01b03166125d5565b15612cc0575b60405182906001600160a01b0389169060009060008051602061373e833981519152908290a4612c8860008884806001019550886125e4565b612ca5576040516368d2bf6b60e11b815260040160405180910390fd5b80821415612c4f578260005414612cbb57600080fd5b612cf4565b5b6040516001830192906001600160a01b0389169060009060008051602061373e833981519152908290a480821415612cc1575b5060005561203c565b600081815b8451811015612d69576000858281518110612d1f57612d1f6136bb565b60200260200101519050808311612d455760008381526020829052604090209250612d56565b600081815260208490526040902092505b5080612d618161364a565b915050612d02565b509392505050565b828054612d7d9061360f565b90600052602060002090601f016020900481019282612d9f5760008555612de5565b82601f10612db85782800160ff19823516178555612de5565b82800160010185558215612de5579182015b82811115612de5578235825591602001919060010190612dca565b50612df1929150612df5565b5090565b5b80821115612df15760008155600101612df6565b80356001600160a01b0381168114612e2157600080fd5b919050565b80356001600160401b0381168114612e2157600080fd5b600060208284031215612e4f57600080fd5b6118b182612e0a565b60008060408385031215612e6b57600080fd5b612e7483612e0a565b9150612e8260208401612e0a565b90509250929050565b600080600060608486031215612ea057600080fd5b612ea984612e0a565b9250612eb760208501612e0a565b9150604084013590509250925092565b60008060008060808587031215612edd57600080fd5b612ee685612e0a565b9350612ef460208601612e0a565b92506040850135915060608501356001600160401b0380821115612f1757600080fd5b818701915087601f830112612f2b57600080fd5b813581811115612f3d57612f3d6136d1565b604051601f8201601f19908116603f01168101908382118183101715612f6557612f656136d1565b816040528281528a6020848701011115612f7e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612fb557600080fd5b612fbe83612e0a565b915060208301358015158114612fd357600080fd5b809150509250929050565b60008060408385031215612ff157600080fd5b612ffa83612e0a565b946020939093013593505050565b6000806040838503121561301b57600080fd5b61302483612e0a565b915060208301356001600160601b0381168114612fd357600080fd5b60006020828403121561305257600080fd5b5035919050565b6000806040838503121561306c57600080fd5b82359150612e8260208401612e0a565b60006020828403121561308e57600080fd5b81356118b1816136e7565b6000602082840312156130ab57600080fd5b81516118b1816136e7565b6000602082840312156130c857600080fd5b8135600481106118b157600080fd5b600080602083850312156130ea57600080fd5b82356001600160401b038082111561310157600080fd5b818501915085601f83011261311557600080fd5b81358181111561312457600080fd5b86602082850101111561313657600080fd5b60209290920196919550909350505050565b6000806040838503121561315b57600080fd5b50508035926020909101359150565b60006020828403121561317c57600080fd5b6118b182612e26565b60008060006040848603121561319a57600080fd5b6131a384612e26565b925060208401356001600160401b03808211156131bf57600080fd5b818601915086601f8301126131d357600080fd5b8135818111156131e257600080fd5b8760208260051b85010111156131f757600080fd5b6020830194508093505050509250925092565b6000806040838503121561321d57600080fd5b61322683612e26565b9150612e8260208401612e26565b60008060006060848603121561324957600080fd5b61325284612e26565b925061326060208501612e26565b915061326e60408501612e26565b90509250925092565b6000815180845261328f8160208601602086016135cc565b601f01601f19169290920160200192915050565b600481106132c157634e487b7160e01b600052602160045260246000fd5b9052565b600083516132d78184602088016135cc565b602f60f81b90830190815283516132f58160018401602088016135cc565b01600101949350505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516133338160178501602088016135cc565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133648160288401602088016135cc565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133a390830184613277565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6020810161097482846132a3565b61012081016133e3828c6132a3565b981515602082015296151560408801526001600160401b039586166060880152938516608087015291841660a0860152831660c0850152821660e08401521661010090910152919050565b610120810161343d828c6132a3565b6001600160401b03998a16602083015297891660408201526060810196909652608086019490945291861660a0850152851660c0840152841660e083015290921661010090920191909152919050565b60e0810161349b828a6132a3565b6001600160401b039788166020830152958716604082015293861660608501529185166080840152841660a083015290921660c090920191909152919050565b6020815260006118b16020830184613277565b6001600160401b0391909116815260200190565b6001600160401b0392831681529116602082015260400190565b6001600160401b0393841681529183166020830152909116604082015260600190565b6000821982111561355257613552613679565b500190565b60006001600160401b0382811684821680830382111561357957613579613679565b01949350505050565b6000826135915761359161368f565b500490565b60008160001904831182151516156135b0576135b0613679565b500290565b6000828210156135c7576135c7613679565b500390565b60005b838110156135e75781810151838201526020016135cf565b838111156116785750506000910152565b60008161360757613607613679565b506000190190565b600181811c9082168061362357607f821691505b6020821081141561364457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561365e5761365e613679565b5060010190565b6000826136745761367461368f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611a1857600080fdfe15a6d0bb3aa80eeb8af9e60b6fcf74e11d27ec8b6e2b1a0b22e29d447fac5d967def632d64a7259044c921303d544f945a340c8d4334adc0e0bd830a54deb528ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bd4bfbcd1e4d40da1a96485077f01d0535375d706d054d8d9b7663e5d157d7bd64736f6c63430008070033",
  "libraries": {
    "StageChecker": "0x0319A03A52cFB5eEFB6dB8B7CDF2D10C8e24Dfde"
  },
  "devdoc": {
    "author": "Monax Labs",
    "kind": "dev",
    "methods": {
      "_setFreeWhitelistMaxValues(uint64,uint64,uint64)": {
        "details": "this function sets the max values for free whitelist"
      },
      "_setFreeWhitelistMerkleRoot(bytes32)": {
        "details": "this function sets the merkle root hash for free whitelist"
      },
      "_setWhitelistMerkleRoot(bytes32)": {
        "details": "this function sets the merkle root hash for whitelist"
      },
      "_setWhitelistPrice(uint256)": {
        "details": "this function sets the whitelist price"
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "deleteRoyalties()": {
        "details": "this function deletes the royalty info"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "liveMint(uint64)": {
        "details": "this function handles the livemint and takes the number of tokens to mint. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total livemint for account Mint and transfer to account."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setMaxCapPerWallet(uint64)": {
        "details": "this function sets max cap per wallet for both WL and mint"
      },
      "setMaxLimit(uint256)": {
        "details": "this function sets the maximum total in a collection"
      },
      "setMintMaxValues(uint64,uint64)": {
        "details": "this function sets the max values for mint"
      },
      "setMintPrice(uint256)": {
        "details": "this function sets the mint price"
      },
      "setRoyalties(address,uint96)": {
        "details": "this function sets the royalty percentage for the collection"
      },
      "setWhitelistMaxValues(uint64,uint64,uint64)": {
        "details": "this function sets the max values for whitelist"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "this function overrides the ERC721 tokenURI function. It returns the URI as `${baseURI}/${tokenId}`"
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "upgradeBaseURI(string)": {
        "details": "this function upgrades the baseURI. All token metadata is stored in the baseURI as a JSON"
      },
      "whitelistMint(uint64,bytes32[])": {
        "details": "this function handles the whitelist mint and takes the number of tokens to mint and proof. It executes the following checks: 1. Have required values been set? 2-5. Are the totals <= max values set? 6. Is the payment == price * number of tokens? 7. Is the merke proof verified? If all return true, increment quantity to total whitelist mint for account and total whitelist mint. Mint and transfer to account."
      },
      "withdraw()": {
        "details": "this function enables the owner to withdraw funds from the contract"
      }
    },
    "title": "ERC721 Cedar contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ACCESS_ROLE()": {
        "notice": "Access role "
      },
      "WHITELIST_ACCESS_ROLE()": {
        "notice": "Access role"
      },
      "baseURI()": {
        "notice": "Stores the base uri"
      },
      "freeWhitelistCapPerWallet()": {
        "notice": "Stores max free whitelist cap"
      },
      "freeWhitelistMaxPerTx()": {
        "notice": "Store free whitelist max per transaction"
      },
      "freeWhitelistMaxSupply()": {
        "notice": "Stores the max free whitelist supply"
      },
      "maxCapPerWallet()": {
        "notice": "Stores the maximum cap per wallet, includes both WL and live mints"
      },
      "mintCapPerWallet()": {
        "notice": "Stores max mint cap per wallet"
      },
      "mintMaxPerTx()": {
        "notice": "Stores mint max mint per tx"
      },
      "mintPrice()": {
        "notice": "Stores the mint price"
      },
      "tokenURI(uint256)": {
        "notice": "gets token URI"
      },
      "upgradeBaseURI(string)": {
        "notice": "upgrades the baseURI"
      },
      "whitelistCapPerWallet()": {
        "notice": "Stores the max whitelist cap per wallet"
      },
      "whitelistMaxSupply()": {
        "notice": "Stores the max whitelist supply"
      },
      "whitelistPrice()": {
        "notice": "Stores the whitelist price"
      }
    },
    "notice": "The contract supports whitelists and live mint.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27780,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 27782,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 27784,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 27786,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27791,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)27769_storage)"
      },
      {
        "astId": 27796,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)27778_storage)"
      },
      {
        "astId": 27800,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 27806,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6446,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_roles",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)6441_storage)"
      },
      {
        "astId": 16457,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 16460,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistPriceSet",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 16463,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistMaxValuesSet",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 16466,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "freeWhitelistMaxValuesSet",
        "offset": 2,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 16469,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistCapPerWallet",
        "offset": 3,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 16472,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "freeWhitelistCapPerWallet",
        "offset": 11,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 16474,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistMaxPerTx",
        "offset": 19,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 16477,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "freeWhitelistMaxPerTx",
        "offset": 0,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 16480,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistTotalMinted",
        "offset": 8,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 16483,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "freeWhitelistTotalMinted",
        "offset": 16,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 16486,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistMaxSupply",
        "offset": 24,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 16489,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "freeWhitelistMaxSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint64"
      },
      {
        "astId": 16492,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistRoot",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 16495,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "freeWhitelistRoot",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 16498,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "whitelistOwner",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 15984,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "owner",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 15987,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "mintPrice",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 15990,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "maxCapPerWallet",
        "offset": 0,
        "slot": "18",
        "type": "t_uint64"
      },
      {
        "astId": 15993,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "maxMintPerBatch",
        "offset": 8,
        "slot": "18",
        "type": "t_uint64"
      },
      {
        "astId": 15996,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "mintCapPerWallet",
        "offset": 16,
        "slot": "18",
        "type": "t_uint64"
      },
      {
        "astId": 15999,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "mintMaxPerTx",
        "offset": 24,
        "slot": "18",
        "type": "t_uint64"
      },
      {
        "astId": 16001,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "mintPriceSet",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 16004,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "mintMaxValuesSet",
        "offset": 1,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 16006,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "maxCapPerWalletSet",
        "offset": 2,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 16009,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "freeWhitelistStatus",
        "offset": 3,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 16015,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "mintData",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(MintData)15981_storage)"
      },
      {
        "astId": 16018,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "maxLimit",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 16021,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "maxLimitSet",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 16027,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "stage",
        "offset": 1,
        "slot": "22",
        "type": "t_enum(Stages)23717"
      },
      {
        "astId": 11131,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(RoyaltyInfo)11128_storage"
      },
      {
        "astId": 11136,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)11128_storage)"
      },
      {
        "astId": 15214,
        "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
        "label": "baseURI",
        "offset": 0,
        "slot": "25",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Stages)23717": {
        "encoding": "inplace",
        "label": "enum StageChecker.Stages",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)27778_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)27778_storage"
      },
      "t_mapping(t_address,t_struct(MintData)15981_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MintInfo.MintData)",
        "numberOfBytes": "32",
        "value": "t_struct(MintData)15981_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)6441_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)6441_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)11128_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)11128_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)27769_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)27769_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)27778_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 27771,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 27773,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 27775,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 27777,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MintData)15981_storage": {
        "encoding": "inplace",
        "label": "struct MintInfo.MintData",
        "members": [
          {
            "astId": 15976,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "whitelistTotal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 15978,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "mintTotal",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 15980,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "freeWhitelistTotal",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)6441_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 6438,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6440,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)11128_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 11125,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11127,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)27769_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 27764,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27766,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 27768,
            "contract": "contracts/cedar/ERC721CedarLivemint.sol:ERC721CedarLivemint",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
